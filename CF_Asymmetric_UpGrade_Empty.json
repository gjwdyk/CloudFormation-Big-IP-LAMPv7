{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Default values within this AWS CloudFormation Template is valid only for AWS Region **Singapore**. **WARNING** This template creates a new VPC and all necessary AWS Resources including EC2 Instances to perform a Demo/Test environment. You will be billed by AWS for the AWS Resources used if you create a stack from this template.",
  "Mappings": {
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.1.0.0\/16"
      },
      "PublicManagement": {
        "CIDR": "10.1.1.0\/24"
      },
      "PrivateInternalBiDirection": {
        "CIDR": "10.1.5.0\/24"
      },
      "PrivateInternalOutGoing": {
        "CIDR": "10.1.10.0\/24"
      },
      "PrivateInternalInComing": {
        "CIDR": "10.1.20.0\/24"
      },
      "PrivateExternalOutGoing": {
        "CIDR": "10.1.30.0\/24"
      },
      "PrivateExternalInComing": {
        "CIDR": "10.1.40.0\/24"
      },
      "PrivateHighAvailability": {
        "CIDR": "10.1.50.0\/24"
      },
      "PublicExternalBiDirection": {
        "CIDR": "10.1.101.0\/24"
      }
    },
    "IPAddressConfig": {
      "Management": {
        "OutGoingBigIP": "10.1.1.123",
        "InComingBigIP": "10.1.1.234",
        "BigIPInternal": "10.1.1.20",
        "BigIPExternal": "10.1.1.30",
        "InternalNode": "10.1.1.10"
      }
    }
  },



  "Parameters" : {
    "TagPreFix" : {
      "Type": "String",
      "Default": "CF",
      "Description": "Prefix to be given to all possible resources created by this stack-template."
    },
    "BigIPImageID" : {
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-0daf7ecfd1d5848f4",
      "Description": "Provide a valid AMI ID of Big-IP in the AWS Region."
    },
    "OutGoingInComingBigIPInstanceType" : {
      "Type": "String",
      "Default": "m5.4xlarge",
      "Description": "Provide a valid Instance Type for the OutGoing Big-IP and InComing Big-IP."
    },
    "BigIPInternalExternalInstanceType" : {
      "Type": "String",
      "Default": "m5.xlarge",
      "Description": "Provide a valid Instance Type for the Big-IP Internal and Big-IP External."
    },
    "InternalNodeImageID" : {
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-05f112c29645f0812",
      "Description": "Provide a valid Ubuntu 16.04 AMI ID of Internal Node in the AWS Region. Ubuntu Server 16.04 64-Bit x86 : ami-05f112c29645f0812 , Ubuntu Server 16.04 64-Bit Arm : ami-025cec89b10fc5a8d ."
    },
    "InternalNodeInstanceType" : {
      "Type": "String",
      "Default": "t2.micro",
      "Description": "Provide a valid Instance Type for the Internal Node."
    },
    "EC2SSHKeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "EC2 KeyPair to enable SSH access to the EC2 instances, including the Big-IP. Select the SSH KeyPair you have access to."
    },
    "NTPServer": {
      "Default": "0.pool.ntp.org",
      "Description": "NTP server for this implementation",
      "Type": "String"
    },
    "TimeZone": {
      "Default": "Asia/Singapore",
      "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for valid optional values. For example, 'US/Eastern'.",
      "Type": "String"
    },
    "OutGoingBigIPRegistrationKeyLicense" : {
      "Type": "String",
      "NoEcho": "true",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*$",
      "ConstraintDescription": "Must be a valid Big-IP Registration Key License.",
      "Description": "Big-IP Registration Key License. Format : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE --add-on FFFFFFF-GGGGGGG --add-on HHHHHHH-IIIIIII ; or simply : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE if there is no Add-On module."
    },
    "InComingBigIPRegistrationKeyLicense" : {
      "Type": "String",
      "NoEcho": "true",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*$",
      "ConstraintDescription": "Must be a valid Big-IP Registration Key License.",
      "Description": "Big-IP Registration Key License. Format : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE --add-on FFFFFFF-GGGGGGG --add-on HHHHHHH-IIIIIII ; or simply : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE if there is no Add-On module."
    },
    "BigIPInternalRegistrationKeyLicense" : {
      "Type": "String",
      "NoEcho": "true",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*$",
      "ConstraintDescription": "Must be a valid Big-IP Registration Key License.",
      "Description": "Big-IP Registration Key License. Format : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE --add-on FFFFFFF-GGGGGGG --add-on HHHHHHH-IIIIIII ; or simply : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE if there is no Add-On module."
    },
    "BigIPExternalRegistrationKeyLicense" : {
      "Type": "String",
      "NoEcho": "true",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "^([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*$",
      "ConstraintDescription": "Must be a valid Big-IP Registration Key License.",
      "Description": "Big-IP Registration Key License. Format : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE --add-on FFFFFFF-GGGGGGG --add-on HHHHHHH-IIIIIII ; or simply : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE if there is no Add-On module."
    },
    "OutGoingInComingBigIPModules" : {
      "Type": "String",
      "Default": "ltm:nominal,avr:nominal",
      "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,avr:nominal,asm:nominal,apm:nominal . Provisionable modules are: afm, am, apm, asm, avr, cgnat, dos, fps, gtm, ilx, lc, ltm, pem, sslo, swg, urldb ."
    },
    "BigIPInternalExternalModules" : {
      "Type": "String",
      "Default": "ltm:nominal,avr:nominal",
      "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,avr:nominal,asm:nominal,apm:nominal . Provisionable modules are: afm, am, apm, asm, avr, cgnat, dos, fps, gtm, ilx, lc, ltm, pem, sslo, swg, urldb ."
    },
    "OutGoingInComingBigIPUpgradeModules" : {
      "Type": "String",
      "Default": "cgnat:nominal,avr:nominal",
      "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,avr:nominal,asm:nominal,apm:nominal . Provisionable modules are: afm, am, apm, asm, avr, cgnat, dos, fps, gtm, ilx, lc, ltm, pem, sslo, swg, urldb ."
    },
    "BigIPInternalExternalUpgradeModules" : {
      "Type": "String",
      "Default": "cgnat:nominal,avr:nominal",
      "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,avr:nominal,asm:nominal,apm:nominal . Provisionable modules are: afm, am, apm, asm, avr, cgnat, dos, fps, gtm, ilx, lc, ltm, pem, sslo, swg, urldb ."
    },
    "OutGoingBigIPAS3URL" : {
      "Type": "String",
      "Default": "none",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL for the AS3 declaration JSON file to be deployed on OutGoing Big-IP. Input *none* (without the *) to deploy without a service configuration."
    },
    "InComingBigIPAS3URL" : {
      "Type": "String",
      "Default": "none",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL for the AS3 declaration JSON file to be deployed on InComing Big-IP. Input *none* (without the *) to deploy without a service configuration."
    },
    "BigIPInternalAS3URL" : {
      "Type": "String",
      "Default": "none",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL for the AS3 declaration JSON file to be deployed on InComing Big-IP. Input *none* (without the *) to deploy without a service configuration."
    },
    "BigIPExternalAS3URL" : {
      "Type": "String",
      "Default": "none",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL for the AS3 declaration JSON file to be deployed on InComing Big-IP. Input *none* (without the *) to deploy without a service configuration."
    },

    "BigIPAdminPassword" : {
      "Type": "String",
      "NoEcho": "true",
      "Description": "Password for the Admin User of Big-IP."
    },
    "SSMTPConfiguration" : {
      "Type": "String",
      "Default": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/GMailSSMTP.conf",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL of the SSMTP configuration. This CloudFormation template requires a SSMTP configuration (i.e. Mandatory Input). If the SSMTP configuration is located at AWS S3, ensure that this CloudFormation template can read the file. If the SSMTP configuration is located at GitHub, ensure that this CloudFormation template can read the RAW SSMTP configuration file (i.e. NOT a web page containing the SSMTP configuration file)."
    },
    "SMTPUserID" : {
      "Type": "String",
      "Description": "User ID used to access to the SMTP Server, for sending the notification. Big-IP uses this account to send notification to the recipient."
    },
    "SMTPUserPassword" : {
      "Type": "String",
      "NoEcho": "true",
      "Description": "Password for the User ID to access the SMTP Server."
    },
    "eMailNotificationRecipient" : {
      "Type": "String",
      "AllowedPattern": "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$",
      "Description": "The Recipient's eMail Address of the Big-IP Notification messages."
    },
    "UserAlertConfiguration" : {
      "Type": "String",
      "Default": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/user_alert.archive",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL of the additional user_alert configuration."
    },
    "UpgradeImageURLPath" : {
      "Type": "String",
      "Default": "https://aws-f5-singapore-hc-demo-bucket-files.s3-ap-southeast-1.amazonaws.com/Big-IP/16.0.0/",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL Path of the upgrade .iso image. Keep the last / character."
    },
    "UpgradeImageFileName" : {
      "Type": "String",
      "Default": "BIGIP-16.0.0-0.0.12.iso",
      "AllowedPattern": "^(BIGIP\\-)((([0-9]+)\\.)+)([0-9]+)\\-((([0-9]+)\\.)+)([0-9]+)\\.iso$|^none$",
      "Description": "File Name of the upgrade .iso image."
    },
    "BigIPTrafficTLSKey" : {
      "Type": "String",
      "Default": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Certificates/aadc.link.rsa.key",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL of the Private Key used to create the below TLS Certificate. This CloudFormation template requires the TLS Private Key and Certificate (i.e. Mandatory Input). If the Private Key is located at AWS S3, ensure that this CloudFormation template can read the file. If the Private Key is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
    },
    "BigIPTrafficTLSCertificate" : {
      "Type": "String",
      "Default": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Certificates/aadc.link.rsa.crt",
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Description": "URL of the TLS Certificate which Big-IP will use to encrypt or decrypt the requests and responses between users and servers. This CloudFormation template requires the TLS Private Key and Certificate (i.e. Mandatory Input). If the Private Key is located at AWS S3, ensure that this CloudFormation template can read the file. If the Private Key is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
    },
    "OutGoingBigIPLidsa" : {
      "Type": "String",
      "NoEcho": "true",
      "Default": "none",
      "AllowedPattern": "^(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*)(\\\\n(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*))*$|^none$",
      "Description": "Lorem Ipsum Dolor Sit Amet string. Proposed format are Lorem\\nIpsum\\nDolor\\nSit\\nAmet. Leave the field as it is for default."
    },
    "InComingBigIPLidsa" : {
      "Type": "String",
      "NoEcho": "true",
      "Default": "none",
      "AllowedPattern": "^(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*)(\\\\n(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*))*$|^none$",
      "Description": "Lorem Ipsum Dolor Sit Amet string. Proposed format are Lorem\\nIpsum\\nDolor\\nSit\\nAmet. Leave the field as it is for default."
    },
    "BigIPInternalLidsa" : {
      "Type": "String",
      "NoEcho": "true",
      "Default": "none",
      "AllowedPattern": "^(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*)(\\\\n(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*))*$|^none$",
      "Description": "Lorem Ipsum Dolor Sit Amet string. Proposed format are Lorem\\nIpsum\\nDolor\\nSit\\nAmet. Leave the field as it is for default."
    },
    "BigIPExternalLidsa" : {
      "Type": "String",
      "NoEcho": "true",
      "Default": "none",
      "AllowedPattern": "^(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*)(\\\\n(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*))*$|^none$",
      "Description": "Lorem Ipsum Dolor Sit Amet string. Proposed format are Lorem\\nIpsum\\nDolor\\nSit\\nAmet. Leave the field as it is for default."
    }
  },



  "Metadata": {
   "AWS::CloudFormation::Interface": {
    "ParameterGroups": [
     {
      "Label": {
       "default": "Name Tags Parameters"
      },
      "Parameters": [
       "TagPreFix"
      ]
     },
     {},
     {
      "Label": {
       "default": "Common CloudFormation Parameters"
      },
      "Parameters": [
       "BigIPImageID",
       "OutGoingInComingBigIPInstanceType",
       "BigIPInternalExternalInstanceType",
       "InternalNodeImageID",
       "InternalNodeInstanceType",
       "EC2SSHKeyPair",
       "NTPServer",
       "TimeZone"
      ]
     },
     {},
     {
      "Label": {
       "default": "Big-IP Specific Parameters"
      },
      "Parameters": [
       "OutGoingBigIPRegistrationKeyLicense",
       "InComingBigIPRegistrationKeyLicense",
       "BigIPInternalRegistrationKeyLicense",
       "BigIPExternalRegistrationKeyLicense",
       "OutGoingInComingBigIPModules",
       "BigIPInternalExternalModules",
       "OutGoingInComingBigIPUpgradeModules",
       "BigIPInternalExternalUpgradeModules",
       "BigIPAdminPassword",
       "OutGoingBigIPAS3URL",
       "InComingBigIPAS3URL",
       "BigIPInternalAS3URL",
       "BigIPExternalAS3URL",
       "BigIPTrafficTLSKey",
       "BigIPTrafficTLSCertificate"
      ]
     },
     {},
     {
      "Label": {
       "default": "Big-IP Notification Parameters"
      },
      "Parameters": [
       "SSMTPConfiguration",
       "SMTPUserID",
       "SMTPUserPassword",
       "eMailNotificationRecipient",
       "UserAlertConfiguration"
      ]
     },
     {},
     {
      "Label": {
       "default": "Big-IP Upgrade Parameters"
      },
      "Parameters": [
       "UpgradeImageURLPath",
       "UpgradeImageFileName"
      ]
     },
     {},
     {
      "Label": {
       "default": "Lorem Ipsum Dolor Sit Amet"
      },
      "Parameters": [
       "OutGoingBigIPLidsa",
       "InComingBigIPLidsa",
       "BigIPInternalLidsa",
       "BigIPExternalLidsa"
      ]
     },
     {}
    ],
    "ParameterLabels": {
     "TagPreFix": {
      "default": "PreFix for Name Tags"
     },
     "BigIPImageID": {
      "default": "Big-IP Image ID"
     },
     "OutGoingInComingBigIPInstanceType": {
      "default": "Big-IP Instance Type for OutGoing Big-IP and InComing Big-IP"
     },
     "BigIPInternalExternalInstanceType": {
      "default": "Big-IP Internal and Big-IP External Instance Type"
     },
     "InternalNodeImageID": {
      "default": "Internal Node Image ID"
     },
     "InternalNodeInstanceType": {
      "default": "Internal Node Instance Type"
     },
     "EC2SSHKeyPair": {
      "default": "EC2 SSH Key-Pair"
     },
     "NTPServer": {
      "default": "NTP Server used by Big-IP"
     },
     "TimeZone": {
      "default": "Time Zone setting used by Big-IP"
     },

     "OutGoingBigIPRegistrationKeyLicense": {
      "default": "OutGoing Big-IP Registration Key License"
     },
     "InComingBigIPRegistrationKeyLicense": {
      "default": "InComing Big-IP Registration Key License"
     },
     "BigIPInternalRegistrationKeyLicense": {
      "default": "Big-IP Internal Registration Key License"
     },
     "BigIPExternalRegistrationKeyLicense": {
      "default": "Big-IP External Registration Key License"
     },
     "OutGoingInComingBigIPModules": {
      "default": "Big-IP Modules to be Provisioned on OutGoing Big-IP and InComing Big-IP"
     },
     "BigIPInternalExternalModules": {
      "default": "Big-IP Modules to be Provisioned on Big-IP Internal and Big-IP External"
     },
     "OutGoingInComingBigIPUpgradeModules": {
      "default": "Big-IP Modules to be Provisioned on OutGoing Big-IP and InComing Big-IP, after the Upgrade"
     },
     "BigIPInternalExternalUpgradeModules": {
      "default": "Big-IP Modules to be Provisioned on Big-IP Internal and Big-IP External, after the Upgrade"
     },
     "BigIPAdminPassword": {
      "default": "Big-IP's Admin Password"
     },
     "OutGoingBigIPAS3URL": {
      "default": "AS3 Declaration URL for OutGoing Big-IP"
     },
     "InComingBigIPAS3URL": {
      "default": "AS3 Declaration URL for InComing Big-IP"
     },
     "BigIPInternalAS3URL": {
      "default": "AS3 Declaration URL for Big-IP Internal"
     },
     "BigIPExternalAS3URL": {
      "default": "AS3 Declaration URL for Big-IP External"
     },
     "BigIPTrafficTLSKey": {
      "default": "URL of the Private Key (of the SSL/TLS Certificate)"
     },
     "BigIPTrafficTLSCertificate": {
      "default": "URL of the SSL/TLS Certificate"
     },

     "SSMTPConfiguration": {
      "default": "URL of the SSMTP Configuration File"
     },
     "SMTPUserID": {
      "default": "User ID to access the SMTP Server"
     },
     "SMTPUserPassword": {
      "default": "Password of the User ID"
     },
     "eMailNotificationRecipient": {
      "default": "Big-IP Notification Recipient's eMail Address"
     },
     "UserAlertConfiguration": {
      "default": "URL of the additional user_alert configuration"
     },
     "UpgradeImageURLPath": {
      "default": "URL Path of the .iso file used to upgrade the Big-IP image"
     },
     "UpgradeImageFileName": {
      "default": "File Name of the .iso file used to upgrade the Big-IP image"
     },
     "OutGoingBigIPLidsa": {
      "default": "Lorem Ipsum Dolor Sit Amet for OutGoing Big-IP"
     },
     "InComingBigIPLidsa": {
      "default": "Lorem Ipsum Dolor Sit Amet for InComing Big-IP"
     },
     "BigIPInternalLidsa": {
      "default": "Lorem Ipsum Dolor Sit Amet for Big-IP Internal"
     },
     "BigIPExternalLidsa": {
      "default": "Lorem Ipsum Dolor Sit Amet for Big-IP External"
     }

    }
   }
  },



  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "VPC",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "VPC" ] ] }
          }
        ]
      }
    },
    "PublicManagementSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PublicManagement",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PublicManagementSubnet" ] ] }
          }
        ]
      }
    },
    "PrivateInternalBiDirectionSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PrivateInternalBiDirection",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalBiDirectionSubnet" ] ] }
          }
        ]
      }
    },
    "PrivateInternalOutGoingSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PrivateInternalOutGoing",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalOutGoingSubnet" ] ] }
          }
        ]
      }
    },
    "PrivateInternalInComingSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PrivateInternalInComing",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalInComingSubnet" ] ] }
          }
        ]
      }
    },
    "PrivateExternalOutGoingSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PrivateExternalOutGoing",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateExternalOutGoingSubnet" ] ] }
          }
        ]
      }
    },
    "PrivateExternalInComingSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PrivateExternalInComing",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateExternalInComingSubnet" ] ] }
          }
        ]
      }
    },
    "PrivateHighAvailabilitySubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PrivateHighAvailability",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateHighAvailabilitySubnet" ] ] }
          }
        ]
      }
    },
    "PublicExternalBiDirectionSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": { "Ref" : "AWS::Region" }
            }
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
            "PublicExternalBiDirection",
            "CIDR"
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PublicExternalBiDirectionSubnet" ] ] }
          }
        ]
      }
    },



    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternetGateway" ] ] }
          }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },



    "PublicManagementRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PublicManagementRouteTable" ] ] }
          }
        ]
      }
    },
    "PublicManagementRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicManagementRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0\/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicManagementSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicManagementSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicManagementRouteTable"
        }
      }
    },
    "PublicExternalBiDirectionRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PublicExternalBiDirectionRouteTable" ] ] }
          }
        ]
      }
    },
    "PublicExternalBiDirectionRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicExternalBiDirectionRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0\/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicExternalBiDirectionSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicExternalBiDirectionSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicExternalBiDirectionRouteTable"
        }
      }
    },

    "PrivateInternalBiDirectionRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalBiDirectionRouteTable" ] ] }
          }
        ]
      }
    },
    "PrivateInternalBiDirectionSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateInternalBiDirectionSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateInternalBiDirectionRouteTable"
        }
      }
    },
    "PrivateInternalOutGoingRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalOutGoingRouteTable" ] ] }
          }
        ]
      }
    },
    "PrivateInternalOutGoingSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateInternalOutGoingSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateInternalOutGoingRouteTable"
        }
      }
    },
    "PrivateInternalInComingRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalInComingRouteTable" ] ] }
          }
        ]
      }
    },
    "PrivateInternalInComingSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateInternalInComingSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateInternalInComingRouteTable"
        }
      }
    },
    "PrivateExternalOutGoingRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateExternalOutGoingRouteTable" ] ] }
          }
        ]
      }
    },
    "PrivateExternalOutGoingSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateExternalOutGoingSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateExternalOutGoingRouteTable"
        }
      }
    },
    "PrivateExternalInComingRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateExternalInComingRouteTable" ] ] }
          }
        ]
      }
    },
    "PrivateExternalInComingSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateExternalInComingSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateExternalInComingRouteTable"
        }
      }
    },
    "PrivateHighAvailabilityRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateHighAvailabilityRouteTable" ] ] }
          }
        ]
      }
    },
    "PrivateHighAvailabilitySubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateHighAvailabilitySubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateHighAvailabilityRouteTable"
        }
      }
    },



    "PublicManagementNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PublicManagementNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundTCPPublicManagementNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicManagementNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundICMPPublicManagementNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicManagementNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundTCPPublicManagementNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicManagementNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPublicManagementNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicManagementNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "PublicManagementSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicManagementSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicManagementNetworkAcL"
        }
      }
    },

    "PrivateInternalBiDirectionNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalBiDirectionNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPrivateInternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPrivateInternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPrivateInternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPrivateInternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPrivateInternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPrivateInternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateInternalBiDirectionSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateInternalBiDirectionSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateInternalBiDirectionNetworkAcL"
        }
      }
    },

    "PrivateInternalOutGoingNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalOutGoingNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPrivateInternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPrivateInternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPrivateInternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPrivateInternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPrivateInternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPrivateInternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateInternalOutGoingSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateInternalOutGoingSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateInternalOutGoingNetworkAcL"
        }
      }
    },

    "PrivateInternalInComingNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateInternalInComingNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPrivateInternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPrivateInternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPrivateInternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPrivateInternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPrivateInternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPrivateInternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateInternalInComingSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateInternalInComingSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateInternalInComingNetworkAcL"
        }
      }
    },

    "PrivateExternalOutGoingNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateExternalOutGoingNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPrivateExternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPrivateExternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPrivateExternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPrivateExternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPrivateExternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPrivateExternalOutGoingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateExternalOutGoingSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateExternalOutGoingSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateExternalOutGoingNetworkAcL"
        }
      }
    },

    "PrivateExternalInComingNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateExternalInComingNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPrivateExternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPrivateExternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPrivateExternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPrivateExternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPrivateExternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPrivateExternalInComingNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateExternalInComingSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateExternalInComingSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateExternalInComingNetworkAcL"
        }
      }
    },

    "PrivateHighAvailabilityNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PrivateHighAvailabilityNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPrivateHighAvailabilityNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPrivateHighAvailabilityNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPrivateHighAvailabilityNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPrivateHighAvailabilityNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPrivateHighAvailabilityNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPrivateHighAvailabilityNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateHighAvailabilitySubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateHighAvailabilitySubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateHighAvailabilityNetworkAcL"
        }
      }
    },

    "PublicExternalBiDirectionNetworkAcL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "PublicExternalBiDirectionNetworkAcL" ] ] }
          }
        ]
      }
    },
    "InboundICMPPublicExternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "InboundUDPPublicExternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "InboundTCPPublicExternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundICMPPublicExternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "300",
        "Protocol": "1",
        "Icmp" : {
          "Code" : "-1",
          "Type" : "-1"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0"
      }
    },
    "OutboundUDPPublicExternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "200",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundTCPPublicExternalBiDirectionNetworkAcLEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0\/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicExternalBiDirectionSubnetNetworkAcLAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicExternalBiDirectionSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicExternalBiDirectionNetworkAcL"
        }
      }
    },



    "InternalNodePublicManagementSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InternalNodePublicManagementSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternalNodePublicManagementSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPInternalPublicManagementSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPInternalPublicManagementSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPublicManagementSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPublicManagementSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPExternalPublicManagementSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPublicManagementSecurityGroup" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPublicManagementSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "OutGoingBigIPPublicManagementSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPublicManagementSecurityGroup" ] ] }
          }
        ]
      }
    },

    "InComingBigIPPublicManagementSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InComingBigIPPublicManagementSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "ToPort": "443"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPublicManagementSecurityGroup" ] ] }
          }
        ]
      }
    },

    "InternalNodePrivateInternalBiDirectionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InternalNodePrivateInternalBiDirectionSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternalNodePrivateInternalBiDirectionSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPInternalPrivateInternalBiDirectionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPInternalPrivateInternalBiDirectionSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPrivateInternalBiDirectionSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPInternalPrivateInternalOutGoingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPInternalPrivateInternalOutGoingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPrivateInternalOutGoingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPrivateInternalOutGoingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "OutGoingBigIPPrivateInternalOutGoingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateInternalOutGoingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "InComingBigIPPrivateInternalOutGoingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InComingBigIPPrivateInternalOutGoingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateInternalOutGoingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPInternalPrivateInternalInComingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPInternalPrivateInternalInComingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPrivateInternalInComingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPrivateInternalInComingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "OutGoingBigIPPrivateInternalInComingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateInternalInComingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "InComingBigIPPrivateInternalInComingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InComingBigIPPrivateInternalInComingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateInternalInComingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPrivateExternalOutGoingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPExternalPrivateExternalOutGoingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPrivateExternalOutGoingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPrivateExternalOutGoingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "OutGoingBigIPPrivateExternalOutGoingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateExternalOutGoingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "InComingBigIPPrivateExternalOutGoingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InComingBigIPPrivateExternalOutGoingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateExternalOutGoingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPrivateExternalInComingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPExternalPrivateExternalInComingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPrivateExternalInComingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPrivateExternalInComingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "OutGoingBigIPPrivateExternalInComingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateExternalInComingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "InComingBigIPPrivateExternalInComingSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InComingBigIPPrivateExternalInComingSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateExternalInComingSecurityGroup" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPrivateHighAvailabilitySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "OutGoingBigIPPrivateHighAvailabilitySecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateHighAvailabilitySecurityGroup" ] ] }
          }
        ]
      }
    },

    "InComingBigIPPrivateHighAvailabilitySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "InComingBigIPPrivateHighAvailabilitySecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "udp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "IpProtocol": "icmp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateHighAvailabilitySecurityGroup" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPublicExternalBiDirectionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "BigIPExternalPublicExternalBiDirectionSecurityGroup",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "127.0.0.1/32"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPublicExternalBiDirectionSecurityGroup" ] ] }
          }
        ]
      }
    },



    "InternalNodePublicManagementNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InternalNodePublicManagementNetworkInterface",
        "GroupSet" : [ {"Ref" : "InternalNodePublicManagementSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicManagementSubnet" },
        "PrivateIpAddress" : "10.1.1.10",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternalNodePublicManagementNetworkInterface" ] ] }
          }
        ]
      }
    },
    "BigIPInternalPublicManagementNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPInternalPublicManagementNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPInternalPublicManagementSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicManagementSubnet" },
        "PrivateIpAddress" : "10.1.1.20",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPublicManagementNetworkInterface" ] ] }
          }
        ]
      }
    },
    "BigIPExternalPublicManagementNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPExternalPublicManagementNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPExternalPublicManagementSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicManagementSubnet" },
        "PrivateIpAddress" : "10.1.1.30",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPublicManagementNetworkInterface" ] ] }
          }
        ]
      }
    },
    "OutGoingBigIPPublicManagementNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "OutGoingBigIPPublicManagementNetworkInterface",
        "GroupSet" : [ {"Ref" : "OutGoingBigIPPublicManagementSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicManagementSubnet" },
        "PrivateIpAddress" : "10.1.1.123",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPublicManagementNetworkInterface" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPublicManagementNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InComingBigIPPublicManagementNetworkInterface",
        "GroupSet" : [ {"Ref" : "InComingBigIPPublicManagementSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicManagementSubnet" },
        "PrivateIpAddress" : "10.1.1.234",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPublicManagementNetworkInterface" ] ] }
          }
        ]
      }
    },

    "InternalNodePrivateInternalBiDirectionNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InternalNodePrivateInternalBiDirectionNetworkInterface",
        "GroupSet" : [ {"Ref" : "InternalNodePrivateInternalBiDirectionSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalBiDirectionSubnet" },
        "PrivateIpAddress" : "10.1.5.10",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternalNodePrivateInternalBiDirectionNetworkInterface" ] ] }
          }
        ]
      }
    },
    "BigIPInternalPrivateInternalBiDirectionNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPInternalPrivateInternalBiDirectionNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPInternalPrivateInternalBiDirectionSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalBiDirectionSubnet" },
        "PrivateIpAddress" : "10.1.5.20",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPrivateInternalBiDirectionNetworkInterface" ] ] }
          }
        ]
      }
    },

    "BigIPInternalPrivateInternalOutGoingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPInternalPrivateInternalOutGoingNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPInternalPrivateInternalOutGoingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalOutGoingSubnet" },
        "PrivateIpAddress" : "10.1.10.20",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPrivateInternalOutGoingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "OutGoingBigIPPrivateInternalOutGoingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "OutGoingBigIPPrivateInternalOutGoingNetworkInterface",
        "GroupSet" : [ {"Ref" : "OutGoingBigIPPrivateInternalOutGoingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalOutGoingSubnet" },
        "PrivateIpAddress" : "10.1.10.123",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateInternalOutGoingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPrivateInternalOutGoingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InComingBigIPPrivateInternalOutGoingNetworkInterface",
        "GroupSet" : [ {"Ref" : "InComingBigIPPrivateInternalOutGoingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalOutGoingSubnet" },
        "PrivateIpAddress" : "10.1.10.234",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateInternalOutGoingNetworkInterface" ] ] }
          }
        ]
      }
    },

    "BigIPInternalPrivateInternalInComingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPInternalPrivateInternalInComingNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPInternalPrivateInternalInComingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalInComingSubnet" },
        "PrivateIpAddress" : "10.1.20.20",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPrivateInternalInComingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "OutGoingBigIPPrivateInternalInComingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "OutGoingBigIPPrivateInternalInComingNetworkInterface",
        "GroupSet" : [ {"Ref" : "OutGoingBigIPPrivateInternalInComingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalInComingSubnet" },
        "PrivateIpAddress" : "10.1.20.123",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateInternalInComingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPrivateInternalInComingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InComingBigIPPrivateInternalInComingNetworkInterface",
        "GroupSet" : [ {"Ref" : "InComingBigIPPrivateInternalInComingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateInternalInComingSubnet" },
        "PrivateIpAddress" : "10.1.20.234",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateInternalInComingNetworkInterface" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPrivateExternalOutGoingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPExternalPrivateExternalOutGoingNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPExternalPrivateExternalOutGoingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateExternalOutGoingSubnet" },
        "PrivateIpAddress" : "10.1.30.30",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPrivateExternalOutGoingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "OutGoingBigIPPrivateExternalOutGoingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "OutGoingBigIPPrivateExternalOutGoingNetworkInterface",
        "GroupSet" : [ {"Ref" : "OutGoingBigIPPrivateExternalOutGoingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateExternalOutGoingSubnet" },
        "PrivateIpAddress" : "10.1.30.123",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateExternalOutGoingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPrivateExternalOutGoingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InComingBigIPPrivateExternalOutGoingNetworkInterface",
        "GroupSet" : [ {"Ref" : "InComingBigIPPrivateExternalOutGoingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateExternalOutGoingSubnet" },
        "PrivateIpAddress" : "10.1.30.234",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateExternalOutGoingNetworkInterface" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPrivateExternalInComingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPExternalPrivateExternalInComingNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPExternalPrivateExternalInComingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateExternalInComingSubnet" },
        "PrivateIpAddress" : "10.1.40.30",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPrivateExternalInComingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "OutGoingBigIPPrivateExternalInComingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "OutGoingBigIPPrivateExternalInComingNetworkInterface",
        "GroupSet" : [ {"Ref" : "OutGoingBigIPPrivateExternalInComingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateExternalInComingSubnet" },
        "PrivateIpAddress" : "10.1.40.123",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateExternalInComingNetworkInterface" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPrivateExternalInComingNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InComingBigIPPrivateExternalInComingNetworkInterface",
        "GroupSet" : [ {"Ref" : "InComingBigIPPrivateExternalInComingSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateExternalInComingSubnet" },
        "PrivateIpAddress" : "10.1.40.234",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateExternalInComingNetworkInterface" ] ] }
          }
        ]
      }
    },

    "OutGoingBigIPPrivateHighAvailabilityNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "OutGoingBigIPPrivateHighAvailabilityNetworkInterface",
        "GroupSet" : [ {"Ref" : "OutGoingBigIPPrivateHighAvailabilitySecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateHighAvailabilitySubnet" },
        "PrivateIpAddress" : "10.1.50.123",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPrivateHighAvailabilityNetworkInterface" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPrivateHighAvailabilityNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "InComingBigIPPrivateHighAvailabilityNetworkInterface",
        "GroupSet" : [ {"Ref" : "InComingBigIPPrivateHighAvailabilitySecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PrivateHighAvailabilitySubnet" },
        "PrivateIpAddress" : "10.1.50.234",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPrivateHighAvailabilityNetworkInterface" ] ] }
          }
        ]
      }
    },

    "BigIPExternalPublicExternalBiDirectionNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "BigIPExternalPublicExternalBiDirectionNetworkInterface",
        "GroupSet" : [ {"Ref" : "BigIPExternalPublicExternalBiDirectionSecurityGroup"} ],
        "SourceDestCheck" : "false",
        "SubnetId" : { "Ref" : "PublicExternalBiDirectionSubnet" },
        "PrivateIpAddress" : "10.1.101.30",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPublicExternalBiDirectionNetworkInterface" ] ] }
          }
        ]
      }
    },



    "InternalNodePublicManagementEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternalNodePublicManagementEIP" ] ] }
          }
        ]
      }
    },
    "InternalNodePublicManagementEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "InternalNodePublicManagementEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "InternalNodePublicManagementNetworkInterface" },
        "PrivateIpAddress" : "10.1.1.10"
      }
    },

    "BigIPInternalPublicManagementEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternalPublicManagementEIP" ] ] }
          }
        ]
      }
    },
    "BigIPInternalPublicManagementEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "BigIPInternalPublicManagementEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "BigIPInternalPublicManagementNetworkInterface" },
        "PrivateIpAddress" : "10.1.1.20"
      }
    },

    "BigIPExternalPublicManagementEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPublicManagementEIP" ] ] }
          }
        ]
      }
    },
    "BigIPExternalPublicManagementEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "BigIPExternalPublicManagementEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "BigIPExternalPublicManagementNetworkInterface" },
        "PrivateIpAddress" : "10.1.1.30"
      }
    },

    "OutGoingBigIPPublicManagementEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIPPublicManagementEIP" ] ] }
          }
        ]
      }
    },
    "OutGoingBigIPPublicManagementEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "OutGoingBigIPPublicManagementEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "OutGoingBigIPPublicManagementNetworkInterface" },
        "PrivateIpAddress" : "10.1.1.123"
      }
    },

    "InComingBigIPPublicManagementEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIPPublicManagementEIP" ] ] }
          }
        ]
      }
    },
    "InComingBigIPPublicManagementEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "InComingBigIPPublicManagementEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "InComingBigIPPublicManagementNetworkInterface" },
        "PrivateIpAddress" : "10.1.1.234"
      }
    },

    "BigIPExternalPublicExternalBiDirectionEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternalPublicExternalBiDirectionEIP" ] ] }
          }
        ]
      }
    },
    "BigIPExternalPublicExternalBiDirectionEIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "BigIPExternalPublicExternalBiDirectionEIP", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "BigIPExternalPublicExternalBiDirectionNetworkInterface" },
        "PrivateIpAddress" : "10.1.101.30"
      }
    },



    "OutGoingBigIP": {
     "Metadata": {
      "AWS::CloudFormation::Init": {
       "config": {
        "commands": {
         "000-disable-1nicautoconfig": {
          "command": "/usr/bin/setdb provision.1nicautoconfig disable"
         },
         "010-install-libs": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/installCloudLibs.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "020-generate-password": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --signal PASSWORD_CREATED",
             " --file f5-rest-node",
             " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
             " --log-level silly",
             " -o /var/log/cloud/aws/generatePassword.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "030-create-admin-user": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --wait-for PASSWORD_CREATED",
             " --signal ADMIN_CREATED",
             " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
             " --cl-args '--user admin",
             " --password-file /config/cloud/aws/.adminPassword",
             " --password-encrypted",
             "'",
             " --log-level silly",
             " -o /var/log/cloud/aws/createUser.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "040-network-config": {
          "command": {
           "Fn::Join": [
            "",
            [
             "GATEWAY_MAC_0=`ifconfig eth0 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_0=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_0}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_0=${GATEWAY_CIDR_BLOCK_0%/*}; ",
             "GATEWAY_PREFIX_0=${GATEWAY_CIDR_BLOCK_0#*/}; ",
             "GATEWAY_0=`echo ${GATEWAY_NET_0} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_1=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_1=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_1}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_1=${GATEWAY_CIDR_BLOCK_1%/*}; ",
             "GATEWAY_PREFIX_1=${GATEWAY_CIDR_BLOCK_1#*/}; ",
             "GATEWAY_1=`echo ${GATEWAY_NET_1} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_2=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_2}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_2=${GATEWAY_CIDR_BLOCK_2%/*}; ",
             "GATEWAY_PREFIX_2=${GATEWAY_CIDR_BLOCK_2#*/}; ",
             "GATEWAY_2=`echo ${GATEWAY_NET_2} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_3=`ifconfig eth3 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_3=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_3}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_3=${GATEWAY_CIDR_BLOCK_3%/*}; ",
             "GATEWAY_PREFIX_3=${GATEWAY_CIDR_BLOCK_3#*/}; ",
             "GATEWAY_3=`echo ${GATEWAY_NET_3} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_4=`ifconfig eth4 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_4=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_4}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_4=${GATEWAY_CIDR_BLOCK_4%/*}; ",
             "GATEWAY_PREFIX_4=${GATEWAY_CIDR_BLOCK_4#*/}; ",
             "GATEWAY_4=`echo ${GATEWAY_NET_4} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_5=`ifconfig eth5 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_5=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_5}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_5=${GATEWAY_CIDR_BLOCK_5%/*}; ",
             "GATEWAY_PREFIX_5=${GATEWAY_CIDR_BLOCK_5#*/}; ",
             "GATEWAY_5=`echo ${GATEWAY_NET_5} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "nohup /config/waitThenRun.sh ",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
             "--host localhost ",
             "--user admin ",
             "--password-url file:///config/cloud/aws/.adminPassword ",
             "--password-encrypted ",
             "-o /var/log/cloud/aws/network.log ",
             "--log-level silly ",
             "--wait-for ADMIN_CREATED ",
             "--signal NETWORK_CONFIG_DONE ",

             "--vlan name:OutGoingBigIPPrivateInternalOutGoingVLAN,nic:1.1 ",
             "--self-ip name:OutGoingBigIPPrivateInternalOutGoingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "OutGoingBigIPPrivateInternalOutGoingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_1},vlan:OutGoingBigIPPrivateInternalOutGoingVLAN ",

             "--vlan name:OutGoingBigIPPrivateInternalInComingVLAN,nic:1.2 ",
             "--self-ip name:OutGoingBigIPPrivateInternalInComingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "OutGoingBigIPPrivateInternalInComingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_2},vlan:OutGoingBigIPPrivateInternalInComingVLAN ",

             "--vlan name:OutGoingBigIPPrivateExternalOutGoingVLAN,nic:1.3 ",
             "--self-ip name:OutGoingBigIPPrivateExternalOutGoingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "OutGoingBigIPPrivateExternalOutGoingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_3},vlan:OutGoingBigIPPrivateExternalOutGoingVLAN ",

             "--vlan name:OutGoingBigIPPrivateExternalInComingVLAN,nic:1.4 ",
             "--self-ip name:OutGoingBigIPPrivateExternalInComingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "OutGoingBigIPPrivateExternalInComingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_4},vlan:OutGoingBigIPPrivateExternalInComingVLAN ",

             "--vlan name:OutGoingBigIPPrivateHighAvailabilityVLAN,nic:1.5 ",
             "--self-ip name:OutGoingBigIPPrivateHighAvailabilitySelfIP,address:",
             {
              "Fn::GetAtt": [
               "OutGoingBigIPPrivateHighAvailabilityNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_5},vlan:OutGoingBigIPPrivateHighAvailabilityVLAN ",

             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "050-onboard-BIG-IP": {
          "command": {

             "Fn::Join": [
              " ",
              [
               "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
               "nohup /config/waitThenRun.sh",
               "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
               "--install-ilx-package file:///config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm",
               "--wait-for NETWORK_CONFIG_DONE",
               "--signal ONBOARD_DONE",
               "-o /var/log/cloud/aws/onboard.log",
               "--log-level silly",
               "--no-reboot",
               "--host localhost",
               "--user admin",
               "--password-url file:///config/cloud/aws/.adminPassword",
               "--password-encrypted",
               "--hostname `curl -s -f --retry 22 --interface ", { "Fn::FindInMap": [ "IPAddressConfig", "Management", "OutGoingBigIP" ] }, " http://169.254.169.254/latest/meta-data/hostname`",
               "--ntp ", { "Ref": "NTPServer" },
               "--tz ", { "Ref": "TimeZone" },
               "--dns ${NAME_SERVER}",
               "--modules ", { "Ref": "OutGoingInComingBigIPModules" },
               "--license ", { "Ref": "OutGoingBigIPRegistrationKeyLicense" },
               "-d tm.tcpudptxchecksum:software-only ",
               "--ping",
               "&>> /var/log/cloud/aws/install.log < /dev/null &"
              ]
             ]

          }
         },
         "060-custom-config": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/custom-config.sh",
             "--cwd /config/cloud/aws",
             "-o /var/log/cloud/aws/custom-config.log",
             "--log-level silly",
             "--wait-for ONBOARD_DONE",
             "--signal CUSTOM_CONFIG_DONE",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "065-cluster": {
          "command": {
           "Fn::Join": [
            " ",
            []
           ]
          }
         },
         "070-rm-password": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/rm-password.sh",
             "-o /var/log/cloud/aws/rm-password.log",
             "--log-level silly",
             "--wait-for CUSTOM_CONFIG_DONE",
             "--signal PASSWORD_REMOVED",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         }
        },
        "files": {
         "/config/cloud/aws/custom-config.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "declare -a tmsh=()\n",
             "echo 'starting custom-config.sh'\n",
             "echo \"HC's Mark --------->>>>>>>>> When Required, Add Certificate Installation Commands Here.\"\n",
             "tmsh+=(\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
             "\"tmsh install /sys crypto cert HC-Imported-SSL-Certificate from-local-file /config/cloud/domain.name.rsa.crt\"\n",
             "\"tmsh install /sys crypto key HC-Imported-SSL-Key from-local-file /config/cloud/domain.name.rsa.key\"\n",
             "\"tmsh save /sys config\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
             "    if $CMD;then\n",
             "        echo \"command $CMD successfully executed.\"\n",
             "    else\n",
             "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "    fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After initialization, before AS3 execution.\"\n",

             "### START CUSTOM CONFIGURATION\n",
             "source /config/cloud/aws/onboard_config_vars\n",
             "deployed=\"no\"\n",
             "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
             "file_loc=\"/config/cloud/custom_config\"\n",
             "if [[ $declarationUrl =~ $url_regex ]]; then\n",
             "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
             "  if [[ $response_code == 200 ]]; then\n",
             "    echo \"Custom config download complete; checking for valid JSON.\"\n",
             "    cat $file_loc | jq .class\n",
             "    if [[ $? == 0 ]]; then\n",
             "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
             "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
             "        echo \"Deployment of custom application succeeded.\"\n",
             "        deployed=\"yes\"\n",
             "      else\n",
             "         echo \"Failed to deploy custom application; continuing...\"\n",
             "      fi\n",
             "    else\n",
             "      echo \"Custom config was not valid JSON, continuing...\"\n",
             "    fi\n",
             "  else\n",
             "    echo \"Failed to download custom config; continuing...\"\n",
             "  fi\n",
             "else\n",
             "  echo \"Custom config was not a URL, continuing...\"\n",
             "fi\n",
             "### END CUSTOM CONFIGURATION\n",

             "echo \"HC's Mark --------->>>>>>>>> After AS3 execution, before Authentication removed.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/v1.0.0/f5.cloud_logger.v1.0.0.tmpl"
         },
         "/config/cloud/aws/f5.service_discovery.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/v2.3.2/f5.service_discovery.tmpl"
         },
         "/config/cloud/aws/getNameServer.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "INTERFACE=$1",
             "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
             "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
             "VPC_NET=${VPC_CIDR_BLOCK%/*}",
             "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
             "echo $NAME_SERVER"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/onboard_config_vars": {
          "content": {
           "Fn::Join": [
            "",
            [
             "",
             "#!/bin/bash\n",
             "# Generated from 5.4.0\n",
             "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
             "region='", { "Ref": "AWS::Region" }, "'\n",
             "adminUsername='admin'\n",
             "timezone='", { "Ref": "TimeZone" }, "'\n",
             "ntpServer='", { "Ref": "NTPServer" }, "'\n",
             "declarationUrl='", { "Ref": "OutGoingBigIPAS3URL" }, "'\n",
             "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
             "managementGuiPort='443'\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/rm-password.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "date\n",
             "echo 'starting rm-password.sh'\n",
             "declare -a tmsh=()\n",
             "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  if $CMD;then\n",
             "      echo \"command $CMD successfully executed.\"\n",
             "  else\n",
             "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "  fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After Authentication Removed ; Additional Custom Configuration can be Applied.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "https://aws-f5-singapore-hc-demo-bucket-files.s3-ap-southeast-1.amazonaws.com/CF/PreFiles/F5ApplicationServices3/v3.21.0/f5-appsvcs-3.21.0-4.noarch.rpm"
         },
         "/config/cloud/f5-cloud-libs-aws.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.6.0/f5-cloud-libs-aws.tar.gz"
         },
         "/config/cloud/f5-cloud-libs.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.16.0/f5-cloud-libs.tar.gz"
         },
         "/config/installCloudLibs.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "echo about to execute",
             "checks=0",
             "while [ $checks -lt 120 ]; do echo checking mcpd",
             "    tmsh -a show sys mcp-state field-fmt | grep -q running",
             "    if [ $? == 0 ]; then",
             "        echo mcpd ready",
             "        break",
             "    fi",
             "    echo mcpd not ready yet",
             "    let checks=checks+1",
             "    sleep 10",
             "done",
             "echo loading verifyHash script",
             "if ! tmsh load sys config merge file /config/verifyHash; then",
             "    echo cannot validate signature of /config/verifyHash",
             "    exit",
             "fi",
             "echo loaded verifyHash",
             "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
             "for fileToVerify in \"${filesToVerify[@]}\"",
             "do",
             "    echo verifying \"$fileToVerify\"",
             "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
             "        echo \"$fileToVerify\" is not valid",
             "        exit 1",
             "    fi",
             "    echo verified \"$fileToVerify\"",
             "done",
             "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
             "echo expanding f5-cloud-libs.tar.gz",
             "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo installing dependencies",
             "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo cloud libs install complete",
             "touch /config/cloud/cloudLibsReady"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/verifyHash": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "cli script /Common/verifyHash {",
             "  proc script::run {} {",
             "    if {[catch {",
             "      set hashes(f5-cloud-libs.tar.gz) fcc095984fcd3ab1f3bde79408224086ec34981dada9cc24107c2e539e2297856df987dfc4c4795c171c5eec8f121d14429b3e4b72c5ad32fde94e2c6bfda0db",
             "      set hashes(f5-cloud-libs-aws.tar.gz) 2ff4e6269ce74850fc3794045d0a394ecd0b472ba9efa16b34786b38d07088b3a49339b41708973c4bffe55a539471c2f9ec60a009ddd087912c1fca722b48ef",
             "      set hashes(f5-cloud-libs-azure.tar.gz) 6db2878a2c10d98550eded6b66f0474516c1952d3605217164e3b5261c771419201d94c7cdb07744c9d5db894334f93380963217b670d87d3151bfcdb301c295",
             "      set hashes(f5-cloud-libs-gce.tar.gz) a5cfaed1fe33da677b3f10dc1a7ca82f5739ff24e45e91b3a8f7b06d6b2e280e5f1eaf5fe2d33009b2cc67c10f2d906aab26f942d591b68fa8a7fddfd54a0efe",
             "      set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9",
             "      set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513",
             "      set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
             "      set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
             "      set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
             "      set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d",
             "      set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4",
             "      set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6",
             "      set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74",
             "      set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620",
             "      set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b",
             "      set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20",
             "      set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d",
             "      set hashes(f5-appsvcs-3.21.0-4.noarch.rpm) e88bdcd41efc2a3578b95983d0836912975e7fa69d75d7953cbd9be6454ff1be2fb40f1fed5741113639935aba11e5de555fcd8b61cbe2e366106ba26f07895a",
             "      set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c",
             "      set file_path [lindex $tmsh::argv 1]",
             "      set file_name [file tail $file_path]",
             "      if {![info exists hashes($file_name)]} {",
             "        tmsh::log err \"No hash found for $file_name\"",
             "        exit 1",
             "      }",
             "      set expected_hash $hashes($file_name)",
             "      set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
             "      if { $expected_hash eq $computed_hash } {",
             "        exit 0",
             "      }",
             "      tmsh::log err \"Hash does not match for $file_path\"",
             "      exit 1",
             "    }]} {",
             "      tmsh::log err {Unexpected error in verifyHash}",
             "      exit 1",
             "    }",
             "  }",
             "}"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/waitThenRun.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "while true; do echo \"waiting for cloud libs install to complete\"",
             "    if [ -f /config/cloud/cloudLibsReady ]; then",
             "        break",
             "    else",
             "        sleep 10",
             "    fi",
             "done",
             "\"$@\""
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },

         "/etc/ssmtp/ArchiveSSMTPConfiguration": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "SSMTPConfiguration" }
         },
         "/config/user_alert.archive": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "UserAlertConfiguration" }
         },
         "/config/BigIPUnitID": {
          "content": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIP" ] ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/eMailNotificationRecipient": {
          "content": { "Ref": "eMailNotificationRecipient" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/BigIPModules": {
          "content": { "Ref": "OutGoingInComingBigIPUpgradeModules" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/ManagementIP": {
          "content": { "Fn::FindInMap": [ "IPAddressConfig", "Management", "OutGoingBigIP" ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TimeZone": {
          "content": { "Ref": "TimeZone" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/NTPServer": {
          "content": { "Ref": "NTPServer" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TemporaryLidsa": {
          "content": { "Ref": "OutGoingBigIPLidsa" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/cloud/domain.name.rsa.key": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSKey" }
         },
         "/config/cloud/domain.name.rsa.crt": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSCertificate" }
         },
         "/config/UpgradeImageFileName": {
          "content": { "Ref": "UpgradeImageFileName" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/BigIPAdminPassword": {
          "content": { "Ref": "BigIPAdminPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserID": {
          "content": { "Ref": "SMTPUserID" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserPassword": {
          "content":{ "Ref": "SMTPUserPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/shared/images/UpgradeImage.iso": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" } ] ] }
         },
         "/shared/images/UpgradeImage.iso.md5": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" }, ".md5" ] ] }
         },
         "/config/BigIPSendMail": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/BigIPSendMail"
         },
         "/config/ClearFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/ClearFlags"
         },
         "/config/RotateLog": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/RotateLog"
         },
         "/etc/crontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/crontab"
         },
         "/etc/anacrontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/anacrontab"
         },
         "/config/UpGrade": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/OutGoingUpGrade"
         },
         "/config/lidsa/BigIPLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPLidsa"
         },
         "/config/lidsa/BigIPSendMailLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPSendMailLidsa"
         },
         "/config/lidsa/ClearLidsaFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/ClearLidsaFlags"
         }

        }
       }
      }
     },
     "Properties": {
      "BlockDeviceMappings": [
       {
        "DeviceName": "/dev/xvda",
        "Ebs": {
         "DeleteOnTermination": "true",
         "VolumeSize": "100",
         "VolumeType": "gp2"
        }
       },
       {
        "DeviceName": "/dev/xvdb",
        "NoDevice": {}
       }
      ],
      "ImageId": { "Ref": "BigIPImageID" },
      "InstanceType": { "Ref": "OutGoingInComingBigIPInstanceType" },
      "KeyName": { "Ref": "EC2SSHKeyPair" },

      "NetworkInterfaces": [
        {
          "Description": "OutGoingBigIPPublicManagementNetworkInterface",
          "DeviceIndex": "0",
          "NetworkInterfaceId": {
            "Ref": "OutGoingBigIPPublicManagementNetworkInterface"
          }
        },
        {
          "Description": "OutGoingBigIPPrivateInternalOutGoingNetworkInterface",
          "DeviceIndex": "1",
          "NetworkInterfaceId": {
            "Ref": "OutGoingBigIPPrivateInternalOutGoingNetworkInterface"
          }
        },
        {
          "Description": "OutGoingBigIPPrivateInternalInComingNetworkInterface",
          "DeviceIndex": "2",
          "NetworkInterfaceId": {
            "Ref": "OutGoingBigIPPrivateInternalInComingNetworkInterface"
          }
        },
        {
          "Description": "OutGoingBigIPPrivateExternalOutGoingNetworkInterface",
          "DeviceIndex": "3",
          "NetworkInterfaceId": {
            "Ref": "OutGoingBigIPPrivateExternalOutGoingNetworkInterface"
          }
        },
        {
          "Description": "OutGoingBigIPPrivateExternalInComingNetworkInterface",
          "DeviceIndex": "4",
          "NetworkInterfaceId": {
            "Ref": "OutGoingBigIPPrivateExternalInComingNetworkInterface"
          }
        },
        {
          "Description": "OutGoingBigIPPrivateHighAvailabilityNetworkInterface",
          "DeviceIndex": "5",
          "NetworkInterfaceId": {
            "Ref": "OutGoingBigIPPrivateHighAvailabilityNetworkInterface"
          }
        }
      ],

      "Tags": [
        {
          "Key": "Name",
          "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "OutGoingBigIP" ] ] }
        }
      ],

      "UserData": {
       "Fn::Base64": {
        "Fn::Join": [
         "",
         [
          "#!/bin/bash\n",

          "Log_File=/var/log/cloud/aws/install.log\n",
          "UpGradeImageName_File=/config/UpgradeImageFileName\n",
          "UpGradeImage_File=/shared/images/`cat $UpGradeImageName_File`\n",

          "if [ -f \"$Log_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $Log_File exist.\" >> \"$Log_File\"\n",
          "else\n",
          "  sudo touch \"$Log_File\"\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` touch $Log_File .\" >> \"$Log_File\"\n",
          "fi\n",

          "if [ -f \"$UpGradeImage_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File exist.\" >> \"$Log_File\"\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "else\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File does NOT exist.\" >> \"$Log_File\"\n",
          "  /opt/aws/apitools/cfn-init/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" }, " -r ", "OutGoingBigIP", " --region ", { "Ref": "AWS::Region" }, "\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "fi\n",

          "\n"
         ]
        ]
       }
      }
     },
     "Type": "AWS::EC2::Instance"
    },



    "InComingBigIP": {
     "Metadata": {
      "AWS::CloudFormation::Init": {
       "config": {
        "commands": {
         "000-disable-1nicautoconfig": {
          "command": "/usr/bin/setdb provision.1nicautoconfig disable"
         },
         "010-install-libs": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/installCloudLibs.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "020-generate-password": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --signal PASSWORD_CREATED",
             " --file f5-rest-node",
             " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
             " --log-level silly",
             " -o /var/log/cloud/aws/generatePassword.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "030-create-admin-user": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --wait-for PASSWORD_CREATED",
             " --signal ADMIN_CREATED",
             " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
             " --cl-args '--user admin",
             " --password-file /config/cloud/aws/.adminPassword",
             " --password-encrypted",
             "'",
             " --log-level silly",
             " -o /var/log/cloud/aws/createUser.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "040-network-config": {
          "command": {
           "Fn::Join": [
            "",
            [
             "GATEWAY_MAC_0=`ifconfig eth0 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_0=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_0}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_0=${GATEWAY_CIDR_BLOCK_0%/*}; ",
             "GATEWAY_PREFIX_0=${GATEWAY_CIDR_BLOCK_0#*/}; ",
             "GATEWAY_0=`echo ${GATEWAY_NET_0} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_1=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_1=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_1}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_1=${GATEWAY_CIDR_BLOCK_1%/*}; ",
             "GATEWAY_PREFIX_1=${GATEWAY_CIDR_BLOCK_1#*/}; ",
             "GATEWAY_1=`echo ${GATEWAY_NET_1} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_2=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_2}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_2=${GATEWAY_CIDR_BLOCK_2%/*}; ",
             "GATEWAY_PREFIX_2=${GATEWAY_CIDR_BLOCK_2#*/}; ",
             "GATEWAY_2=`echo ${GATEWAY_NET_2} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_3=`ifconfig eth3 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_3=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_3}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_3=${GATEWAY_CIDR_BLOCK_3%/*}; ",
             "GATEWAY_PREFIX_3=${GATEWAY_CIDR_BLOCK_3#*/}; ",
             "GATEWAY_3=`echo ${GATEWAY_NET_3} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_4=`ifconfig eth4 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_4=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_4}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_4=${GATEWAY_CIDR_BLOCK_4%/*}; ",
             "GATEWAY_PREFIX_4=${GATEWAY_CIDR_BLOCK_4#*/}; ",
             "GATEWAY_4=`echo ${GATEWAY_NET_4} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_5=`ifconfig eth5 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_5=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_5}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_5=${GATEWAY_CIDR_BLOCK_5%/*}; ",
             "GATEWAY_PREFIX_5=${GATEWAY_CIDR_BLOCK_5#*/}; ",
             "GATEWAY_5=`echo ${GATEWAY_NET_5} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "nohup /config/waitThenRun.sh ",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
             "--host localhost ",
             "--user admin ",
             "--password-url file:///config/cloud/aws/.adminPassword ",
             "--password-encrypted ",
             "-o /var/log/cloud/aws/network.log ",
             "--log-level silly ",
             "--wait-for ADMIN_CREATED ",
             "--signal NETWORK_CONFIG_DONE ",

             "--vlan name:InComingBigIPPrivateInternalOutGoingVLAN,nic:1.1 ",
             "--self-ip name:InComingBigIPPrivateInternalOutGoingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "InComingBigIPPrivateInternalOutGoingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_1},vlan:InComingBigIPPrivateInternalOutGoingVLAN ",

             "--vlan name:InComingBigIPPrivateInternalInComingVLAN,nic:1.2 ",
             "--self-ip name:InComingBigIPPrivateInternalInComingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "InComingBigIPPrivateInternalInComingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_2},vlan:InComingBigIPPrivateInternalInComingVLAN ",

             "--vlan name:InComingBigIPPrivateExternalOutGoingVLAN,nic:1.3 ",
             "--self-ip name:InComingBigIPPrivateExternalOutGoingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "InComingBigIPPrivateExternalOutGoingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_3},vlan:InComingBigIPPrivateExternalOutGoingVLAN ",

             "--vlan name:InComingBigIPPrivateExternalInComingVLAN,nic:1.4 ",
             "--self-ip name:InComingBigIPPrivateExternalInComingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "InComingBigIPPrivateExternalInComingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_4},vlan:InComingBigIPPrivateExternalInComingVLAN ",

             "--vlan name:InComingBigIPPrivateHighAvailabilityVLAN,nic:1.5 ",
             "--self-ip name:InComingBigIPPrivateHighAvailabilitySelfIP,address:",
             {
              "Fn::GetAtt": [
               "InComingBigIPPrivateHighAvailabilityNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_5},vlan:InComingBigIPPrivateHighAvailabilityVLAN ",

             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "050-onboard-BIG-IP": {
          "command": {

             "Fn::Join": [
              " ",
              [
               "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
               "nohup /config/waitThenRun.sh",
               "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
               "--install-ilx-package file:///config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm",
               "--wait-for NETWORK_CONFIG_DONE",
               "--signal ONBOARD_DONE",
               "-o /var/log/cloud/aws/onboard.log",
               "--log-level silly",
               "--no-reboot",
               "--host localhost",
               "--user admin",
               "--password-url file:///config/cloud/aws/.adminPassword",
               "--password-encrypted",
               "--hostname `curl -s -f --retry 22 --interface ", { "Fn::FindInMap": [ "IPAddressConfig", "Management", "InComingBigIP" ] }, " http://169.254.169.254/latest/meta-data/hostname`",
               "--ntp ", { "Ref": "NTPServer" },
               "--tz ", { "Ref": "TimeZone" },
               "--dns ${NAME_SERVER}",
               "--modules ", { "Ref": "OutGoingInComingBigIPModules" },
               "--license ", { "Ref": "InComingBigIPRegistrationKeyLicense" },
               "-d tm.tcpudptxchecksum:software-only ",
               "--ping",
               "&>> /var/log/cloud/aws/install.log < /dev/null &"
              ]
             ]

          }
         },
         "060-custom-config": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/custom-config.sh",
             "--cwd /config/cloud/aws",
             "-o /var/log/cloud/aws/custom-config.log",
             "--log-level silly",
             "--wait-for ONBOARD_DONE",
             "--signal CUSTOM_CONFIG_DONE",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "065-cluster": {
          "command": {
           "Fn::Join": [
            " ",
            []
           ]
          }
         },
         "070-rm-password": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/rm-password.sh",
             "-o /var/log/cloud/aws/rm-password.log",
             "--log-level silly",
             "--wait-for CUSTOM_CONFIG_DONE",
             "--signal PASSWORD_REMOVED",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         }
        },
        "files": {
         "/config/cloud/aws/custom-config.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "declare -a tmsh=()\n",
             "echo 'starting custom-config.sh'\n",
             "echo \"HC's Mark --------->>>>>>>>> When Required, Add Certificate Installation Commands Here.\"\n",
             "tmsh+=(\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
             "\"tmsh install /sys crypto cert HC-Imported-SSL-Certificate from-local-file /config/cloud/domain.name.rsa.crt\"\n",
             "\"tmsh install /sys crypto key HC-Imported-SSL-Key from-local-file /config/cloud/domain.name.rsa.key\"\n",
             "\"tmsh save /sys config\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
             "    if $CMD;then\n",
             "        echo \"command $CMD successfully executed.\"\n",
             "    else\n",
             "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "    fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After initialization, before AS3 execution.\"\n",

             "### START CUSTOM CONFIGURATION\n",
             "source /config/cloud/aws/onboard_config_vars\n",
             "deployed=\"no\"\n",
             "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
             "file_loc=\"/config/cloud/custom_config\"\n",
             "if [[ $declarationUrl =~ $url_regex ]]; then\n",
             "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
             "  if [[ $response_code == 200 ]]; then\n",
             "    echo \"Custom config download complete; checking for valid JSON.\"\n",
             "    cat $file_loc | jq .class\n",
             "    if [[ $? == 0 ]]; then\n",
             "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
             "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
             "        echo \"Deployment of custom application succeeded.\"\n",
             "        deployed=\"yes\"\n",
             "      else\n",
             "         echo \"Failed to deploy custom application; continuing...\"\n",
             "      fi\n",
             "    else\n",
             "      echo \"Custom config was not valid JSON, continuing...\"\n",
             "    fi\n",
             "  else\n",
             "    echo \"Failed to download custom config; continuing...\"\n",
             "  fi\n",
             "else\n",
             "  echo \"Custom config was not a URL, continuing...\"\n",
             "fi\n",
             "### END CUSTOM CONFIGURATION\n",

             "echo \"HC's Mark --------->>>>>>>>> After AS3 execution, before Authentication removed.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/v1.0.0/f5.cloud_logger.v1.0.0.tmpl"
         },
         "/config/cloud/aws/f5.service_discovery.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/v2.3.2/f5.service_discovery.tmpl"
         },
         "/config/cloud/aws/getNameServer.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "INTERFACE=$1",
             "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
             "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
             "VPC_NET=${VPC_CIDR_BLOCK%/*}",
             "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
             "echo $NAME_SERVER"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/onboard_config_vars": {
          "content": {
           "Fn::Join": [
            "",
            [
             "",
             "#!/bin/bash\n",
             "# Generated from 5.4.0\n",
             "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
             "region='", { "Ref": "AWS::Region" }, "'\n",
             "adminUsername='admin'\n",
             "timezone='", { "Ref": "TimeZone" }, "'\n",
             "ntpServer='", { "Ref": "NTPServer" }, "'\n",
             "declarationUrl='", { "Ref": "InComingBigIPAS3URL" }, "'\n",
             "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
             "managementGuiPort='443'\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/rm-password.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "date\n",
             "echo 'starting rm-password.sh'\n",
             "declare -a tmsh=()\n",
             "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  if $CMD;then\n",
             "      echo \"command $CMD successfully executed.\"\n",
             "  else\n",
             "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "  fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After Authentication Removed ; Additional Custom Configuration can be Applied.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "https://aws-f5-singapore-hc-demo-bucket-files.s3-ap-southeast-1.amazonaws.com/CF/PreFiles/F5ApplicationServices3/v3.21.0/f5-appsvcs-3.21.0-4.noarch.rpm"
         },
         "/config/cloud/f5-cloud-libs-aws.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.6.0/f5-cloud-libs-aws.tar.gz"
         },
         "/config/cloud/f5-cloud-libs.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.16.0/f5-cloud-libs.tar.gz"
         },
         "/config/installCloudLibs.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "echo about to execute",
             "checks=0",
             "while [ $checks -lt 120 ]; do echo checking mcpd",
             "    tmsh -a show sys mcp-state field-fmt | grep -q running",
             "    if [ $? == 0 ]; then",
             "        echo mcpd ready",
             "        break",
             "    fi",
             "    echo mcpd not ready yet",
             "    let checks=checks+1",
             "    sleep 10",
             "done",
             "echo loading verifyHash script",
             "if ! tmsh load sys config merge file /config/verifyHash; then",
             "    echo cannot validate signature of /config/verifyHash",
             "    exit",
             "fi",
             "echo loaded verifyHash",
             "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
             "for fileToVerify in \"${filesToVerify[@]}\"",
             "do",
             "    echo verifying \"$fileToVerify\"",
             "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
             "        echo \"$fileToVerify\" is not valid",
             "        exit 1",
             "    fi",
             "    echo verified \"$fileToVerify\"",
             "done",
             "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
             "echo expanding f5-cloud-libs.tar.gz",
             "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo installing dependencies",
             "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo cloud libs install complete",
             "touch /config/cloud/cloudLibsReady"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/verifyHash": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "cli script /Common/verifyHash {",
             "  proc script::run {} {",
             "    if {[catch {",
             "      set hashes(f5-cloud-libs.tar.gz) fcc095984fcd3ab1f3bde79408224086ec34981dada9cc24107c2e539e2297856df987dfc4c4795c171c5eec8f121d14429b3e4b72c5ad32fde94e2c6bfda0db",
             "      set hashes(f5-cloud-libs-aws.tar.gz) 2ff4e6269ce74850fc3794045d0a394ecd0b472ba9efa16b34786b38d07088b3a49339b41708973c4bffe55a539471c2f9ec60a009ddd087912c1fca722b48ef",
             "      set hashes(f5-cloud-libs-azure.tar.gz) 6db2878a2c10d98550eded6b66f0474516c1952d3605217164e3b5261c771419201d94c7cdb07744c9d5db894334f93380963217b670d87d3151bfcdb301c295",
             "      set hashes(f5-cloud-libs-gce.tar.gz) a5cfaed1fe33da677b3f10dc1a7ca82f5739ff24e45e91b3a8f7b06d6b2e280e5f1eaf5fe2d33009b2cc67c10f2d906aab26f942d591b68fa8a7fddfd54a0efe",
             "      set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9",
             "      set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513",
             "      set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
             "      set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
             "      set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
             "      set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d",
             "      set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4",
             "      set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6",
             "      set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74",
             "      set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620",
             "      set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b",
             "      set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20",
             "      set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d",
             "      set hashes(f5-appsvcs-3.21.0-4.noarch.rpm) e88bdcd41efc2a3578b95983d0836912975e7fa69d75d7953cbd9be6454ff1be2fb40f1fed5741113639935aba11e5de555fcd8b61cbe2e366106ba26f07895a",
             "      set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c",
             "      set file_path [lindex $tmsh::argv 1]",
             "      set file_name [file tail $file_path]",
             "      if {![info exists hashes($file_name)]} {",
             "        tmsh::log err \"No hash found for $file_name\"",
             "        exit 1",
             "      }",
             "      set expected_hash $hashes($file_name)",
             "      set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
             "      if { $expected_hash eq $computed_hash } {",
             "        exit 0",
             "      }",
             "      tmsh::log err \"Hash does not match for $file_path\"",
             "      exit 1",
             "    }]} {",
             "      tmsh::log err {Unexpected error in verifyHash}",
             "      exit 1",
             "    }",
             "  }",
             "}"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/waitThenRun.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "while true; do echo \"waiting for cloud libs install to complete\"",
             "    if [ -f /config/cloud/cloudLibsReady ]; then",
             "        break",
             "    else",
             "        sleep 10",
             "    fi",
             "done",
             "\"$@\""
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },

         "/etc/ssmtp/ArchiveSSMTPConfiguration": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "SSMTPConfiguration" }
         },
         "/config/user_alert.archive": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "UserAlertConfiguration" }
         },
         "/config/BigIPUnitID": {
          "content": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIP" ] ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/eMailNotificationRecipient": {
          "content": { "Ref": "eMailNotificationRecipient" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/BigIPModules": {
          "content": { "Ref": "OutGoingInComingBigIPUpgradeModules" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/ManagementIP": {
          "content": { "Fn::FindInMap": [ "IPAddressConfig", "Management", "InComingBigIP" ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TimeZone": {
          "content": { "Ref": "TimeZone" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/NTPServer": {
          "content": { "Ref": "NTPServer" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TemporaryLidsa": {
          "content": { "Ref": "InComingBigIPLidsa" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/cloud/domain.name.rsa.key": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSKey" }
         },
         "/config/cloud/domain.name.rsa.crt": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSCertificate" }
         },
         "/config/UpgradeImageFileName": {
          "content": { "Ref": "UpgradeImageFileName" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/BigIPAdminPassword": {
          "content": { "Ref": "BigIPAdminPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserID": {
          "content": { "Ref": "SMTPUserID" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserPassword": {
          "content":{ "Ref": "SMTPUserPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/shared/images/UpgradeImage.iso": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" } ] ] }
         },
         "/shared/images/UpgradeImage.iso.md5": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" }, ".md5" ] ] }
         },
         "/config/BigIPSendMail": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/BigIPSendMail"
         },
         "/config/ClearFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/ClearFlags"
         },
         "/config/RotateLog": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/RotateLog"
         },
         "/etc/crontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/crontab"
         },
         "/etc/anacrontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/anacrontab"
         },
         "/config/UpGrade": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/InComingUpGrade"
         },
         "/config/lidsa/BigIPLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPLidsa"
         },
         "/config/lidsa/BigIPSendMailLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPSendMailLidsa"
         },
         "/config/lidsa/ClearLidsaFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/ClearLidsaFlags"
         }

        }
       }
      }
     },
     "Properties": {
      "BlockDeviceMappings": [
       {
        "DeviceName": "/dev/xvda",
        "Ebs": {
         "DeleteOnTermination": "true",
         "VolumeSize": "100",
         "VolumeType": "gp2"
        }
       },
       {
        "DeviceName": "/dev/xvdb",
        "NoDevice": {}
       }
      ],
      "ImageId": { "Ref": "BigIPImageID" },
      "InstanceType": { "Ref": "OutGoingInComingBigIPInstanceType" },
      "KeyName": { "Ref": "EC2SSHKeyPair" },

      "NetworkInterfaces": [
        {
          "Description": "InComingBigIPPublicManagementNetworkInterface",
          "DeviceIndex": "0",
          "NetworkInterfaceId": {
            "Ref": "InComingBigIPPublicManagementNetworkInterface"
          }
        },
        {
          "Description": "InComingBigIPPrivateInternalOutGoingNetworkInterface",
          "DeviceIndex": "1",
          "NetworkInterfaceId": {
            "Ref": "InComingBigIPPrivateInternalOutGoingNetworkInterface"
          }
        },
        {
          "Description": "InComingBigIPPrivateInternalInComingNetworkInterface",
          "DeviceIndex": "2",
          "NetworkInterfaceId": {
            "Ref": "InComingBigIPPrivateInternalInComingNetworkInterface"
          }
        },
        {
          "Description": "InComingBigIPPrivateExternalOutGoingNetworkInterface",
          "DeviceIndex": "3",
          "NetworkInterfaceId": {
            "Ref": "InComingBigIPPrivateExternalOutGoingNetworkInterface"
          }
        },
        {
          "Description": "InComingBigIPPrivateExternalInComingNetworkInterface",
          "DeviceIndex": "4",
          "NetworkInterfaceId": {
            "Ref": "InComingBigIPPrivateExternalInComingNetworkInterface"
          }
        },
        {
          "Description": "InComingBigIPPrivateHighAvailabilityNetworkInterface",
          "DeviceIndex": "5",
          "NetworkInterfaceId": {
            "Ref": "InComingBigIPPrivateHighAvailabilityNetworkInterface"
          }
        }
      ],

      "Tags": [
        {
          "Key": "Name",
          "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InComingBigIP" ] ] }
        }
      ],

      "UserData": {
       "Fn::Base64": {
        "Fn::Join": [
         "",
         [
          "#!/bin/bash\n",

          "Log_File=/var/log/cloud/aws/install.log\n",
          "UpGradeImageName_File=/config/UpgradeImageFileName\n",
          "UpGradeImage_File=/shared/images/`cat $UpGradeImageName_File`\n",

          "if [ -f \"$Log_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $Log_File exist.\" >> \"$Log_File\"\n",
          "else\n",
          "  sudo touch \"$Log_File\"\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` touch $Log_File .\" >> \"$Log_File\"\n",
          "fi\n",

          "if [ -f \"$UpGradeImage_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File exist.\" >> \"$Log_File\"\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "else\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File does NOT exist.\" >> \"$Log_File\"\n",
          "  /opt/aws/apitools/cfn-init/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" }, " -r ", "InComingBigIP", " --region ", { "Ref": "AWS::Region" }, "\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "fi\n",

          "\n"
         ]
        ]
       }
      }
     },
     "Type": "AWS::EC2::Instance"
    },



    "BigIPInternal": {
     "Metadata": {
      "AWS::CloudFormation::Init": {
       "config": {
        "commands": {
         "000-disable-1nicautoconfig": {
          "command": "/usr/bin/setdb provision.1nicautoconfig disable"
         },
         "010-install-libs": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/installCloudLibs.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "020-generate-password": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --signal PASSWORD_CREATED",
             " --file f5-rest-node",
             " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
             " --log-level silly",
             " -o /var/log/cloud/aws/generatePassword.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "030-create-admin-user": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --wait-for PASSWORD_CREATED",
             " --signal ADMIN_CREATED",
             " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
             " --cl-args '--user admin",
             " --password-file /config/cloud/aws/.adminPassword",
             " --password-encrypted",
             "'",
             " --log-level silly",
             " -o /var/log/cloud/aws/createUser.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "040-network-config": {
          "command": {
           "Fn::Join": [
            "",
            [
             "GATEWAY_MAC_0=`ifconfig eth0 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_0=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_0}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_0=${GATEWAY_CIDR_BLOCK_0%/*}; ",
             "GATEWAY_PREFIX_0=${GATEWAY_CIDR_BLOCK_0#*/}; ",
             "GATEWAY_0=`echo ${GATEWAY_NET_0} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_1=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_1=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_1}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_1=${GATEWAY_CIDR_BLOCK_1%/*}; ",
             "GATEWAY_PREFIX_1=${GATEWAY_CIDR_BLOCK_1#*/}; ",
             "GATEWAY_1=`echo ${GATEWAY_NET_1} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_2=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_2}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_2=${GATEWAY_CIDR_BLOCK_2%/*}; ",
             "GATEWAY_PREFIX_2=${GATEWAY_CIDR_BLOCK_2#*/}; ",
             "GATEWAY_2=`echo ${GATEWAY_NET_2} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_3=`ifconfig eth3 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_3=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_3}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_3=${GATEWAY_CIDR_BLOCK_3%/*}; ",
             "GATEWAY_PREFIX_3=${GATEWAY_CIDR_BLOCK_3#*/}; ",
             "GATEWAY_3=`echo ${GATEWAY_NET_3} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "nohup /config/waitThenRun.sh ",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
             "--host localhost ",
             "--user admin ",
             "--password-url file:///config/cloud/aws/.adminPassword ",
             "--password-encrypted ",
             "-o /var/log/cloud/aws/network.log ",
             "--log-level silly ",
             "--wait-for ADMIN_CREATED ",
             "--signal NETWORK_CONFIG_DONE ",

             "--vlan name:BigIPInternalPrivateInternalBiDirectionVLAN,nic:1.1 ",
             "--self-ip name:BigIPInternalPrivateInternalBiDirectionSelfIP,address:",
             {
              "Fn::GetAtt": [
               "BigIPInternalPrivateInternalBiDirectionNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_1},vlan:BigIPInternalPrivateInternalBiDirectionVLAN ",

             "--vlan name:BigIPInternalPrivateInternalOutGoingVLAN,nic:1.2 ",
             "--self-ip name:BigIPInternalPrivateInternalOutGoingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "BigIPInternalPrivateInternalOutGoingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_2},vlan:BigIPInternalPrivateInternalOutGoingVLAN ",

             "--vlan name:BigIPInternalPrivateInternalInComingVLAN,nic:1.3 ",
             "--self-ip name:BigIPInternalPrivateInternalInComingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "BigIPInternalPrivateInternalInComingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_3},vlan:BigIPInternalPrivateInternalInComingVLAN ",

             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "050-onboard-BIG-IP": {
          "command": {

             "Fn::Join": [
              " ",
              [
               "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
               "nohup /config/waitThenRun.sh",
               "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
               "--install-ilx-package file:///config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm",
               "--wait-for NETWORK_CONFIG_DONE",
               "--signal ONBOARD_DONE",
               "-o /var/log/cloud/aws/onboard.log",
               "--log-level silly",
               "--no-reboot",
               "--host localhost",
               "--user admin",
               "--password-url file:///config/cloud/aws/.adminPassword",
               "--password-encrypted",
               "--hostname `curl -s -f --retry 22 --interface ", { "Fn::FindInMap": [ "IPAddressConfig", "Management", "BigIPInternal" ] }, " http://169.254.169.254/latest/meta-data/hostname`",
               "--ntp ", { "Ref": "NTPServer" },
               "--tz ", { "Ref": "TimeZone" },
               "--dns ${NAME_SERVER}",
               "--modules ", { "Ref": "BigIPInternalExternalModules" },
               "--license ", { "Ref": "BigIPInternalRegistrationKeyLicense" },
               "-d tm.tcpudptxchecksum:software-only ",
               "--ping",
               "&>> /var/log/cloud/aws/install.log < /dev/null &"
              ]
             ]

          }
         },
         "060-custom-config": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/custom-config.sh",
             "--cwd /config/cloud/aws",
             "-o /var/log/cloud/aws/custom-config.log",
             "--log-level silly",
             "--wait-for ONBOARD_DONE",
             "--signal CUSTOM_CONFIG_DONE",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "065-cluster": {
          "command": {
           "Fn::Join": [
            " ",
            []
           ]
          }
         },
         "070-rm-password": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/rm-password.sh",
             "-o /var/log/cloud/aws/rm-password.log",
             "--log-level silly",
             "--wait-for CUSTOM_CONFIG_DONE",
             "--signal PASSWORD_REMOVED",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         }
        },
        "files": {
         "/config/cloud/aws/custom-config.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "declare -a tmsh=()\n",
             "echo 'starting custom-config.sh'\n",
             "echo \"HC's Mark --------->>>>>>>>> When Required, Add Certificate Installation Commands Here.\"\n",
             "tmsh+=(\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
             "\"tmsh install /sys crypto cert HC-Imported-SSL-Certificate from-local-file /config/cloud/domain.name.rsa.crt\"\n",
             "\"tmsh install /sys crypto key HC-Imported-SSL-Key from-local-file /config/cloud/domain.name.rsa.key\"\n",
             "\"tmsh save /sys config\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
             "    if $CMD;then\n",
             "        echo \"command $CMD successfully executed.\"\n",
             "    else\n",
             "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "    fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After initialization, before AS3 execution.\"\n",

             "### START CUSTOM CONFIGURATION\n",
             "source /config/cloud/aws/onboard_config_vars\n",
             "deployed=\"no\"\n",
             "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
             "file_loc=\"/config/cloud/custom_config\"\n",
             "if [[ $declarationUrl =~ $url_regex ]]; then\n",
             "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
             "  if [[ $response_code == 200 ]]; then\n",
             "    echo \"Custom config download complete; checking for valid JSON.\"\n",
             "    cat $file_loc | jq .class\n",
             "    if [[ $? == 0 ]]; then\n",
             "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
             "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
             "        echo \"Deployment of custom application succeeded.\"\n",
             "        deployed=\"yes\"\n",
             "      else\n",
             "         echo \"Failed to deploy custom application; continuing...\"\n",
             "      fi\n",
             "    else\n",
             "      echo \"Custom config was not valid JSON, continuing...\"\n",
             "    fi\n",
             "  else\n",
             "    echo \"Failed to download custom config; continuing...\"\n",
             "  fi\n",
             "else\n",
             "  echo \"Custom config was not a URL, continuing...\"\n",
             "fi\n",
             "### END CUSTOM CONFIGURATION\n",

             "echo \"HC's Mark --------->>>>>>>>> After AS3 execution, before Authentication removed.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/v1.0.0/f5.cloud_logger.v1.0.0.tmpl"
         },
         "/config/cloud/aws/f5.service_discovery.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/v2.3.2/f5.service_discovery.tmpl"
         },
         "/config/cloud/aws/getNameServer.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "INTERFACE=$1",
             "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
             "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
             "VPC_NET=${VPC_CIDR_BLOCK%/*}",
             "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
             "echo $NAME_SERVER"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/onboard_config_vars": {
          "content": {
           "Fn::Join": [
            "",
            [
             "",
             "#!/bin/bash\n",
             "# Generated from 5.4.0\n",
             "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
             "region='", { "Ref": "AWS::Region" }, "'\n",
             "adminUsername='admin'\n",
             "timezone='", { "Ref": "TimeZone" }, "'\n",
             "ntpServer='", { "Ref": "NTPServer" }, "'\n",
             "declarationUrl='", { "Ref": "BigIPInternalAS3URL" }, "'\n",
             "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
             "managementGuiPort='443'\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/rm-password.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "date\n",
             "echo 'starting rm-password.sh'\n",
             "declare -a tmsh=()\n",
             "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  if $CMD;then\n",
             "      echo \"command $CMD successfully executed.\"\n",
             "  else\n",
             "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "  fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After Authentication Removed ; Additional Custom Configuration can be Applied.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "https://aws-f5-singapore-hc-demo-bucket-files.s3-ap-southeast-1.amazonaws.com/CF/PreFiles/F5ApplicationServices3/v3.21.0/f5-appsvcs-3.21.0-4.noarch.rpm"
         },
         "/config/cloud/f5-cloud-libs-aws.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.6.0/f5-cloud-libs-aws.tar.gz"
         },
         "/config/cloud/f5-cloud-libs.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.16.0/f5-cloud-libs.tar.gz"
         },
         "/config/installCloudLibs.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "echo about to execute",
             "checks=0",
             "while [ $checks -lt 120 ]; do echo checking mcpd",
             "    tmsh -a show sys mcp-state field-fmt | grep -q running",
             "    if [ $? == 0 ]; then",
             "        echo mcpd ready",
             "        break",
             "    fi",
             "    echo mcpd not ready yet",
             "    let checks=checks+1",
             "    sleep 10",
             "done",
             "echo loading verifyHash script",
             "if ! tmsh load sys config merge file /config/verifyHash; then",
             "    echo cannot validate signature of /config/verifyHash",
             "    exit",
             "fi",
             "echo loaded verifyHash",
             "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
             "for fileToVerify in \"${filesToVerify[@]}\"",
             "do",
             "    echo verifying \"$fileToVerify\"",
             "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
             "        echo \"$fileToVerify\" is not valid",
             "        exit 1",
             "    fi",
             "    echo verified \"$fileToVerify\"",
             "done",
             "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
             "echo expanding f5-cloud-libs.tar.gz",
             "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo installing dependencies",
             "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo cloud libs install complete",
             "touch /config/cloud/cloudLibsReady"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/verifyHash": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "cli script /Common/verifyHash {",
             "  proc script::run {} {",
             "    if {[catch {",
             "      set hashes(f5-cloud-libs.tar.gz) fcc095984fcd3ab1f3bde79408224086ec34981dada9cc24107c2e539e2297856df987dfc4c4795c171c5eec8f121d14429b3e4b72c5ad32fde94e2c6bfda0db",
             "      set hashes(f5-cloud-libs-aws.tar.gz) 2ff4e6269ce74850fc3794045d0a394ecd0b472ba9efa16b34786b38d07088b3a49339b41708973c4bffe55a539471c2f9ec60a009ddd087912c1fca722b48ef",
             "      set hashes(f5-cloud-libs-azure.tar.gz) 6db2878a2c10d98550eded6b66f0474516c1952d3605217164e3b5261c771419201d94c7cdb07744c9d5db894334f93380963217b670d87d3151bfcdb301c295",
             "      set hashes(f5-cloud-libs-gce.tar.gz) a5cfaed1fe33da677b3f10dc1a7ca82f5739ff24e45e91b3a8f7b06d6b2e280e5f1eaf5fe2d33009b2cc67c10f2d906aab26f942d591b68fa8a7fddfd54a0efe",
             "      set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9",
             "      set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513",
             "      set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
             "      set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
             "      set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
             "      set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d",
             "      set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4",
             "      set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6",
             "      set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74",
             "      set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620",
             "      set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b",
             "      set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20",
             "      set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d",
             "      set hashes(f5-appsvcs-3.21.0-4.noarch.rpm) e88bdcd41efc2a3578b95983d0836912975e7fa69d75d7953cbd9be6454ff1be2fb40f1fed5741113639935aba11e5de555fcd8b61cbe2e366106ba26f07895a",
             "      set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c",
             "      set file_path [lindex $tmsh::argv 1]",
             "      set file_name [file tail $file_path]",
             "      if {![info exists hashes($file_name)]} {",
             "        tmsh::log err \"No hash found for $file_name\"",
             "        exit 1",
             "      }",
             "      set expected_hash $hashes($file_name)",
             "      set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
             "      if { $expected_hash eq $computed_hash } {",
             "        exit 0",
             "      }",
             "      tmsh::log err \"Hash does not match for $file_path\"",
             "      exit 1",
             "    }]} {",
             "      tmsh::log err {Unexpected error in verifyHash}",
             "      exit 1",
             "    }",
             "  }",
             "}"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/waitThenRun.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "while true; do echo \"waiting for cloud libs install to complete\"",
             "    if [ -f /config/cloud/cloudLibsReady ]; then",
             "        break",
             "    else",
             "        sleep 10",
             "    fi",
             "done",
             "\"$@\""
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },

         "/etc/ssmtp/ArchiveSSMTPConfiguration": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "SSMTPConfiguration" }
         },
         "/config/user_alert.archive": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "UserAlertConfiguration" }
         },
         "/config/BigIPUnitID": {
          "content": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternal" ] ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/eMailNotificationRecipient": {
          "content": { "Ref": "eMailNotificationRecipient" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/BigIPModules": {
          "content": { "Ref": "BigIPInternalExternalUpgradeModules" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/ManagementIP": {
          "content": { "Fn::FindInMap": [ "IPAddressConfig", "Management", "BigIPInternal" ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TimeZone": {
          "content": { "Ref": "TimeZone" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/NTPServer": {
          "content": { "Ref": "NTPServer" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TemporaryLidsa": {
          "content": { "Ref": "BigIPInternalLidsa" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/cloud/domain.name.rsa.key": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSKey" }
         },
         "/config/cloud/domain.name.rsa.crt": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSCertificate" }
         },
         "/config/UpgradeImageFileName": {
          "content": { "Ref": "UpgradeImageFileName" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/BigIPAdminPassword": {
          "content": { "Ref": "BigIPAdminPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserID": {
          "content": { "Ref": "SMTPUserID" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserPassword": {
          "content":{ "Ref": "SMTPUserPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/shared/images/UpgradeImage.iso": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" } ] ] }
         },
         "/shared/images/UpgradeImage.iso.md5": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" }, ".md5" ] ] }
         },
         "/config/BigIPSendMail": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/BigIPSendMail"
         },
         "/config/ClearFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/ClearFlags"
         },
         "/config/RotateLog": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/RotateLog"
         },
         "/etc/crontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/crontab"
         },
         "/etc/anacrontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/anacrontab"
         },
         "/config/UpGrade": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/UpGradeInternal"
         },
         "/config/lidsa/BigIPLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPLidsa"
         },
         "/config/lidsa/BigIPSendMailLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPSendMailLidsa"
         },
         "/config/lidsa/ClearLidsaFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/ClearLidsaFlags"
         }

        }
       }
      }
     },
     "Properties": {
      "BlockDeviceMappings": [
       {
        "DeviceName": "/dev/xvda",
        "Ebs": {
         "DeleteOnTermination": "true",
         "VolumeSize": "100",
         "VolumeType": "gp2"
        }
       },
       {
        "DeviceName": "/dev/xvdb",
        "NoDevice": {}
       }
      ],
      "ImageId": { "Ref": "BigIPImageID" },
      "InstanceType": { "Ref": "BigIPInternalExternalInstanceType" },
      "KeyName": { "Ref": "EC2SSHKeyPair" },

      "NetworkInterfaces": [
        {
          "Description": "BigIPInternalPublicManagementNetworkInterface",
          "DeviceIndex": "0",
          "NetworkInterfaceId": {
            "Ref": "BigIPInternalPublicManagementNetworkInterface"
          }
        },
        {
          "Description": "BigIPInternalPrivateInternalBiDirectionNetworkInterface",
          "DeviceIndex": "1",
          "NetworkInterfaceId": {
            "Ref": "BigIPInternalPrivateInternalBiDirectionNetworkInterface"
          }
        },
        {
          "Description": "BigIPInternalPrivateInternalOutGoingNetworkInterface",
          "DeviceIndex": "2",
          "NetworkInterfaceId": {
            "Ref": "BigIPInternalPrivateInternalOutGoingNetworkInterface"
          }
        },
        {
          "Description": "BigIPInternalPrivateInternalInComingNetworkInterface",
          "DeviceIndex": "3",
          "NetworkInterfaceId": {
            "Ref": "BigIPInternalPrivateInternalInComingNetworkInterface"
          }
        }
      ],

      "Tags": [
        {
          "Key": "Name",
          "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPInternal" ] ] }
        }
      ],

      "UserData": {
       "Fn::Base64": {
        "Fn::Join": [
         "",
         [
          "#!/bin/bash\n",

          "Log_File=/var/log/cloud/aws/install.log\n",
          "UpGradeImageName_File=/config/UpgradeImageFileName\n",
          "UpGradeImage_File=/shared/images/`cat $UpGradeImageName_File`\n",

          "if [ -f \"$Log_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $Log_File exist.\" >> \"$Log_File\"\n",
          "else\n",
          "  sudo touch \"$Log_File\"\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` touch $Log_File .\" >> \"$Log_File\"\n",
          "fi\n",

          "if [ -f \"$UpGradeImage_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File exist.\" >> \"$Log_File\"\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "else\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File does NOT exist.\" >> \"$Log_File\"\n",
          "  /opt/aws/apitools/cfn-init/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" }, " -r ", "BigIPInternal", " --region ", { "Ref": "AWS::Region" }, "\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "fi\n",

          "\n"
         ]
        ]
       }
      }
     },
     "Type": "AWS::EC2::Instance"
    },



    "BigIPExternal": {
     "Metadata": {
      "AWS::CloudFormation::Init": {
       "config": {
        "commands": {
         "000-disable-1nicautoconfig": {
          "command": "/usr/bin/setdb provision.1nicautoconfig disable"
         },
         "010-install-libs": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/installCloudLibs.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "020-generate-password": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --signal PASSWORD_CREATED",
             " --file f5-rest-node",
             " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
             " --log-level silly",
             " -o /var/log/cloud/aws/generatePassword.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "030-create-admin-user": {
          "command": {
           "Fn::Join": [
            "",
            [
             "nohup /config/waitThenRun.sh",
             " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             " --wait-for PASSWORD_CREATED",
             " --signal ADMIN_CREATED",
             " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
             " --cl-args '--user admin",
             " --password-file /config/cloud/aws/.adminPassword",
             " --password-encrypted",
             "'",
             " --log-level silly",
             " -o /var/log/cloud/aws/createUser.log",
             " &>> /var/log/cloud/aws/install.log < /dev/null",
             " &"
            ]
           ]
          }
         },
         "040-network-config": {
          "command": {
           "Fn::Join": [
            "",
            [
             "GATEWAY_MAC_0=`ifconfig eth0 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_0=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_0}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_0=${GATEWAY_CIDR_BLOCK_0%/*}; ",
             "GATEWAY_PREFIX_0=${GATEWAY_CIDR_BLOCK_0#*/}; ",
             "GATEWAY_0=`echo ${GATEWAY_NET_0} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_1=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_1=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_1}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_1=${GATEWAY_CIDR_BLOCK_1%/*}; ",
             "GATEWAY_PREFIX_1=${GATEWAY_CIDR_BLOCK_1#*/}; ",
             "GATEWAY_1=`echo ${GATEWAY_NET_1} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_2=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_2}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_2=${GATEWAY_CIDR_BLOCK_2%/*}; ",
             "GATEWAY_PREFIX_2=${GATEWAY_CIDR_BLOCK_2#*/}; ",
             "GATEWAY_2=`echo ${GATEWAY_NET_2} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "GATEWAY_MAC_3=`ifconfig eth3 | egrep ether | awk '{print tolower($2)}'`; ",
             "GATEWAY_CIDR_BLOCK_3=`curl -s -f --retry 22 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC_3}/subnet-ipv4-cidr-block`; ",
             "GATEWAY_NET_3=${GATEWAY_CIDR_BLOCK_3%/*}; ",
             "GATEWAY_PREFIX_3=${GATEWAY_CIDR_BLOCK_3#*/}; ",
             "GATEWAY_3=`echo ${GATEWAY_NET_3} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",

             "nohup /config/waitThenRun.sh ",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
             "--host localhost ",
             "--user admin ",
             "--password-url file:///config/cloud/aws/.adminPassword ",
             "--password-encrypted ",
             "-o /var/log/cloud/aws/network.log ",
             "--log-level silly ",
             "--wait-for ADMIN_CREATED ",
             "--signal NETWORK_CONFIG_DONE ",

             "--vlan name:BigIPExternalPrivateExternalOutGoingVLAN,nic:1.1 ",
             "--self-ip name:BigIPExternalPrivateExternalOutGoingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "BigIPExternalPrivateExternalOutGoingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_1},vlan:BigIPExternalPrivateExternalOutGoingVLAN ",

             "--vlan name:BigIPExternalPrivateExternalInComingVLAN,nic:1.2 ",
             "--self-ip name:BigIPExternalPrivateExternalInComingSelfIP,address:",
             {
              "Fn::GetAtt": [
               "BigIPExternalPrivateExternalInComingNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_2},vlan:BigIPExternalPrivateExternalInComingVLAN ",

             "--vlan name:BigIPExternalPublicExternalBiDirectionVLAN,nic:1.3 ",
             "--self-ip name:BigIPExternalPublicExternalBiDirectionSelfIP,address:",
             {
              "Fn::GetAtt": [
               "BigIPExternalPublicExternalBiDirectionNetworkInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             "/${GATEWAY_PREFIX_3},vlan:BigIPExternalPublicExternalBiDirectionVLAN ",

             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "050-onboard-BIG-IP": {
          "command": {

             "Fn::Join": [
              " ",
              [
               "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
               "nohup /config/waitThenRun.sh",
               "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
               "--install-ilx-package file:///config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm",
               "--wait-for NETWORK_CONFIG_DONE",
               "--signal ONBOARD_DONE",
               "-o /var/log/cloud/aws/onboard.log",
               "--log-level silly",
               "--no-reboot",
               "--host localhost",
               "--user admin",
               "--password-url file:///config/cloud/aws/.adminPassword",
               "--password-encrypted",
               "--hostname `curl -s -f --retry 22 --interface ", { "Fn::FindInMap": [ "IPAddressConfig", "Management", "BigIPExternal" ] }, " http://169.254.169.254/latest/meta-data/hostname`",
               "--ntp ", { "Ref": "NTPServer" },
               "--tz ", { "Ref": "TimeZone" },
               "--dns ${NAME_SERVER}",
               "--modules ", { "Ref": "BigIPInternalExternalModules" },
               "--license ", { "Ref": "BigIPExternalRegistrationKeyLicense" },
               "-d tm.tcpudptxchecksum:software-only ",
               "--ping",
               "&>> /var/log/cloud/aws/install.log < /dev/null &"
              ]
             ]

          }
         },
         "060-custom-config": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/custom-config.sh",
             "--cwd /config/cloud/aws",
             "-o /var/log/cloud/aws/custom-config.log",
             "--log-level silly",
             "--wait-for ONBOARD_DONE",
             "--signal CUSTOM_CONFIG_DONE",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         },
         "065-cluster": {
          "command": {
           "Fn::Join": [
            " ",
            []
           ]
          }
         },
         "070-rm-password": {
          "command": {
           "Fn::Join": [
            " ",
            [
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
             "--file /config/cloud/aws/rm-password.sh",
             "-o /var/log/cloud/aws/rm-password.log",
             "--log-level silly",
             "--wait-for CUSTOM_CONFIG_DONE",
             "--signal PASSWORD_REMOVED",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         }
        },
        "files": {
         "/config/cloud/aws/custom-config.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "declare -a tmsh=()\n",
             "echo 'starting custom-config.sh'\n",
             "echo \"HC's Mark --------->>>>>>>>> When Required, Add Certificate Installation Commands Here.\"\n",
             "tmsh+=(\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
             "\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
             "\"tmsh install /sys crypto cert HC-Imported-SSL-Certificate from-local-file /config/cloud/domain.name.rsa.crt\"\n",
             "\"tmsh install /sys crypto key HC-Imported-SSL-Key from-local-file /config/cloud/domain.name.rsa.key\"\n",
             "\"tmsh save /sys config\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
             "    if $CMD;then\n",
             "        echo \"command $CMD successfully executed.\"\n",
             "    else\n",
             "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "    fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After initialization, before AS3 execution.\"\n",

             "### START CUSTOM CONFIGURATION\n",
             "source /config/cloud/aws/onboard_config_vars\n",
             "deployed=\"no\"\n",
             "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
             "file_loc=\"/config/cloud/custom_config\"\n",
             "if [[ $declarationUrl =~ $url_regex ]]; then\n",
             "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
             "  if [[ $response_code == 200 ]]; then\n",
             "    echo \"Custom config download complete; checking for valid JSON.\"\n",
             "    cat $file_loc | jq .class\n",
             "    if [[ $? == 0 ]]; then\n",
             "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
             "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
             "        echo \"Deployment of custom application succeeded.\"\n",
             "        deployed=\"yes\"\n",
             "      else\n",
             "         echo \"Failed to deploy custom application; continuing...\"\n",
             "      fi\n",
             "    else\n",
             "      echo \"Custom config was not valid JSON, continuing...\"\n",
             "    fi\n",
             "  else\n",
             "    echo \"Failed to download custom config; continuing...\"\n",
             "  fi\n",
             "else\n",
             "  echo \"Custom config was not a URL, continuing...\"\n",
             "fi\n",
             "### END CUSTOM CONFIGURATION\n",

             "echo \"HC's Mark --------->>>>>>>>> After AS3 execution, before Authentication removed.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/v1.0.0/f5.cloud_logger.v1.0.0.tmpl"
         },
         "/config/cloud/aws/f5.service_discovery.tmpl": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/v2.3.2/f5.service_discovery.tmpl"
         },
         "/config/cloud/aws/getNameServer.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "INTERFACE=$1",
             "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
             "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
             "VPC_NET=${VPC_CIDR_BLOCK%/*}",
             "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
             "echo $NAME_SERVER"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/onboard_config_vars": {
          "content": {
           "Fn::Join": [
            "",
            [
             "",
             "#!/bin/bash\n",
             "# Generated from 5.4.0\n",
             "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
             "region='", { "Ref": "AWS::Region" }, "'\n",
             "adminUsername='admin'\n",
             "timezone='", { "Ref": "TimeZone" }, "'\n",
             "ntpServer='", { "Ref": "NTPServer" }, "'\n",
             "declarationUrl='", { "Ref": "BigIPExternalAS3URL" }, "'\n",
             "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
             "managementGuiPort='443'\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/aws/rm-password.sh": {
          "content": {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "PROGNAME=$(basename $0)\n",
             "function error_exit {\n",
             "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
             "exit 1\n",
             "}\n",
             "date\n",
             "echo 'starting rm-password.sh'\n",
             "declare -a tmsh=()\n",
             "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
             "for CMD in \"${tmsh[@]}\"\n",
             "do\n",
             "  if $CMD;then\n",
             "      echo \"command $CMD successfully executed.\"\n",
             "  else\n",
             "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
             "  fi\n",
             "done\n",
             "date\n",

             "echo \"HC's Mark --------->>>>>>>>> After Authentication Removed ; Additional Custom Configuration can be Applied.\"\n",

             "\n"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "https://aws-f5-singapore-hc-demo-bucket-files.s3-ap-southeast-1.amazonaws.com/CF/PreFiles/F5ApplicationServices3/v3.21.0/f5-appsvcs-3.21.0-4.noarch.rpm"
         },
         "/config/cloud/f5-cloud-libs-aws.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.6.0/f5-cloud-libs-aws.tar.gz"
         },
         "/config/cloud/f5-cloud-libs.tar.gz": {
          "group": "root",
          "mode": "000755",
          "owner": "root",
          "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.16.0/f5-cloud-libs.tar.gz"
         },
         "/config/installCloudLibs.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "echo about to execute",
             "checks=0",
             "while [ $checks -lt 120 ]; do echo checking mcpd",
             "    tmsh -a show sys mcp-state field-fmt | grep -q running",
             "    if [ $? == 0 ]; then",
             "        echo mcpd ready",
             "        break",
             "    fi",
             "    echo mcpd not ready yet",
             "    let checks=checks+1",
             "    sleep 10",
             "done",
             "echo loading verifyHash script",
             "if ! tmsh load sys config merge file /config/verifyHash; then",
             "    echo cannot validate signature of /config/verifyHash",
             "    exit",
             "fi",
             "echo loaded verifyHash",
             "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.21.0-4.noarch.rpm\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
             "for fileToVerify in \"${filesToVerify[@]}\"",
             "do",
             "    echo verifying \"$fileToVerify\"",
             "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
             "        echo \"$fileToVerify\" is not valid",
             "        exit 1",
             "    fi",
             "    echo verified \"$fileToVerify\"",
             "done",
             "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
             "echo expanding f5-cloud-libs.tar.gz",
             "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo installing dependencies",
             "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
             "echo cloud libs install complete",
             "touch /config/cloud/cloudLibsReady"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/verifyHash": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "cli script /Common/verifyHash {",
             "  proc script::run {} {",
             "    if {[catch {",
             "      set hashes(f5-cloud-libs.tar.gz) fcc095984fcd3ab1f3bde79408224086ec34981dada9cc24107c2e539e2297856df987dfc4c4795c171c5eec8f121d14429b3e4b72c5ad32fde94e2c6bfda0db",
             "      set hashes(f5-cloud-libs-aws.tar.gz) 2ff4e6269ce74850fc3794045d0a394ecd0b472ba9efa16b34786b38d07088b3a49339b41708973c4bffe55a539471c2f9ec60a009ddd087912c1fca722b48ef",
             "      set hashes(f5-cloud-libs-azure.tar.gz) 6db2878a2c10d98550eded6b66f0474516c1952d3605217164e3b5261c771419201d94c7cdb07744c9d5db894334f93380963217b670d87d3151bfcdb301c295",
             "      set hashes(f5-cloud-libs-gce.tar.gz) a5cfaed1fe33da677b3f10dc1a7ca82f5739ff24e45e91b3a8f7b06d6b2e280e5f1eaf5fe2d33009b2cc67c10f2d906aab26f942d591b68fa8a7fddfd54a0efe",
             "      set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9",
             "      set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513",
             "      set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0",
             "      set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034",
             "      set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe",
             "      set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d",
             "      set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963",
             "      set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4",
             "      set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6",
             "      set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74",
             "      set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620",
             "      set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b",
             "      set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20",
             "      set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d",
             "      set hashes(f5-appsvcs-3.21.0-4.noarch.rpm) e88bdcd41efc2a3578b95983d0836912975e7fa69d75d7953cbd9be6454ff1be2fb40f1fed5741113639935aba11e5de555fcd8b61cbe2e366106ba26f07895a",
             "      set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c",
             "      set file_path [lindex $tmsh::argv 1]",
             "      set file_name [file tail $file_path]",
             "      if {![info exists hashes($file_name)]} {",
             "        tmsh::log err \"No hash found for $file_name\"",
             "        exit 1",
             "      }",
             "      set expected_hash $hashes($file_name)",
             "      set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
             "      if { $expected_hash eq $computed_hash } {",
             "        exit 0",
             "      }",
             "      tmsh::log err \"Hash does not match for $file_path\"",
             "      exit 1",
             "    }]} {",
             "      tmsh::log err {Unexpected error in verifyHash}",
             "      exit 1",
             "    }",
             "  }",
             "}"
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },
         "/config/waitThenRun.sh": {
          "content": {
           "Fn::Join": [
            "\n",
            [
             "#!/bin/bash",
             "while true; do echo \"waiting for cloud libs install to complete\"",
             "    if [ -f /config/cloud/cloudLibsReady ]; then",
             "        break",
             "    else",
             "        sleep 10",
             "    fi",
             "done",
             "\"$@\""
            ]
           ]
          },
          "group": "root",
          "mode": "000755",
          "owner": "root"
         },

         "/etc/ssmtp/ArchiveSSMTPConfiguration": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "SSMTPConfiguration" }
         },
         "/config/user_alert.archive": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "UserAlertConfiguration" }
         },
         "/config/BigIPUnitID": {
          "content": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternal" ] ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/eMailNotificationRecipient": {
          "content": { "Ref": "eMailNotificationRecipient" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/BigIPModules": {
          "content": { "Ref": "BigIPInternalExternalUpgradeModules" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/ManagementIP": {
          "content": { "Fn::FindInMap": [ "IPAddressConfig", "Management", "BigIPExternal" ] },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TimeZone": {
          "content": { "Ref": "TimeZone" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/NTPServer": {
          "content": { "Ref": "NTPServer" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/lidsa/TemporaryLidsa": {
          "content": { "Ref": "BigIPExternalLidsa" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/cloud/domain.name.rsa.key": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSKey" }
         },
         "/config/cloud/domain.name.rsa.crt": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Ref": "BigIPTrafficTLSCertificate" }
         },
         "/config/UpgradeImageFileName": {
          "content": { "Ref": "UpgradeImageFileName" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/config/BigIPAdminPassword": {
          "content": { "Ref": "BigIPAdminPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserID": {
          "content": { "Ref": "SMTPUserID" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/etc/ssmtp/SMTPUserPassword": {
          "content":{ "Ref": "SMTPUserPassword" },
          "group": "root",
          "mode": "000644",
          "owner": "root"
         },
         "/shared/images/UpgradeImage.iso": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" } ] ] }
         },
         "/shared/images/UpgradeImage.iso.md5": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": { "Fn::Join" : [ "", [ { "Ref": "UpgradeImageURLPath" }, { "Ref": "UpgradeImageFileName" }, ".md5" ] ] }
         },
         "/config/BigIPSendMail": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/BigIPSendMail"
         },
         "/config/ClearFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/ClearFlags"
         },
         "/config/RotateLog": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/SSMTP/RotateLog"
         },
         "/etc/crontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/crontab"
         },
         "/etc/anacrontab": {
          "group": "root",
          "mode": "000644",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/anacrontab"
         },
         "/config/UpGrade": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/Upgrade/UpGradeExternal"
         },
         "/config/lidsa/BigIPLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPLidsa"
         },
         "/config/lidsa/BigIPSendMailLidsa": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/BigIPSendMailLidsa"
         },
         "/config/lidsa/ClearLidsaFlags": {
          "group": "root",
          "mode": "000777",
          "owner": "root",
          "source": "https://raw.githubusercontent.com/gjwdyk/CF-Asymmetric-Route/master/lidsa/ClearLidsaFlags"
         }

        }
       }
      }
     },
     "Properties": {
      "BlockDeviceMappings": [
       {
        "DeviceName": "/dev/xvda",
        "Ebs": {
         "DeleteOnTermination": "true",
         "VolumeSize": "100",
         "VolumeType": "gp2"
        }
       },
       {
        "DeviceName": "/dev/xvdb",
        "NoDevice": {}
       }
      ],
      "ImageId": { "Ref": "BigIPImageID" },
      "InstanceType": { "Ref": "BigIPInternalExternalInstanceType" },
      "KeyName": { "Ref": "EC2SSHKeyPair" },

      "NetworkInterfaces": [
        {
          "Description": "BigIPExternalPublicManagementNetworkInterface",
          "DeviceIndex": "0",
          "NetworkInterfaceId": {
            "Ref": "BigIPExternalPublicManagementNetworkInterface"
          }
        },
        {
          "Description": "BigIPExternalPrivateExternalOutGoingNetworkInterface",
          "DeviceIndex": "1",
          "NetworkInterfaceId": {
            "Ref": "BigIPExternalPrivateExternalOutGoingNetworkInterface"
          }
        },
        {
          "Description": "BigIPExternalPrivateExternalInComingNetworkInterface",
          "DeviceIndex": "2",
          "NetworkInterfaceId": {
            "Ref": "BigIPExternalPrivateExternalInComingNetworkInterface"
          }
        },
        {
          "Description": "BigIPExternalPublicExternalBiDirectionNetworkInterface",
          "DeviceIndex": "3",
          "NetworkInterfaceId": {
            "Ref": "BigIPExternalPublicExternalBiDirectionNetworkInterface"
          }
        }
      ],

      "Tags": [
        {
          "Key": "Name",
          "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "BigIPExternal" ] ] }
        }
      ],

      "UserData": {
       "Fn::Base64": {
        "Fn::Join": [
         "",
         [
          "#!/bin/bash\n",

          "Log_File=/var/log/cloud/aws/install.log\n",
          "UpGradeImageName_File=/config/UpgradeImageFileName\n",
          "UpGradeImage_File=/shared/images/`cat $UpGradeImageName_File`\n",

          "if [ -f \"$Log_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $Log_File exist.\" >> \"$Log_File\"\n",
          "else\n",
          "  sudo touch \"$Log_File\"\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` touch $Log_File .\" >> \"$Log_File\"\n",
          "fi\n",

          "if [ -f \"$UpGradeImage_File\" ]; then\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File exist.\" >> \"$Log_File\"\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "else\n",
          "  sudo echo \"UserData `date +%Y%m%d%H%M%S` $UpGradeImage_File does NOT exist.\" >> \"$Log_File\"\n",
          "  /opt/aws/apitools/cfn-init/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" }, " -r ", "BigIPExternal", " --region ", { "Ref": "AWS::Region" }, "\n",
          "  /bin/sudo /bin/bash /config/UpGrade >> \"$Log_File\"\n",
          "fi\n",

          "\n"
         ]
        ]
       }
      }
     },
     "Type": "AWS::EC2::Instance"
    },



    "InternalNode" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref": "InternalNodeImageID" },
        "InstanceType" : { "Ref": "InternalNodeInstanceType" },
        "NetworkInterfaces" : [ { "NetworkInterfaceId" : {"Ref" : "InternalNodePublicManagementNetworkInterface"}, "DeviceIndex" : "0" },
                                { "NetworkInterfaceId" : {"Ref" : "InternalNodePrivateInternalBiDirectionNetworkInterface"}, "DeviceIndex" : "1" } ],
        "KeyName" : { "Ref": "EC2SSHKeyPair" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternalNode" ] ] }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash", "\n",
          "\n",
          "sudo timedatectl set-timezone ", { "Ref": "TimeZone" }, "\n",
          "sudo touch ~/UserData`date +%Y%m%d%H%M%S`.Start", "\n",
          "sudo printf \"1       rt2\\n\" >> /etc/iproute2/rt_tables", "\n",
          "sudo printf \"",
            "auto lo", "\\n",
            "iface lo inet loopback", "\\n",
            "\\n",
            "auto eth0", "\\n",
            "iface eth0 inet static", "\\n",
            "  address 10.1.1.10", "\\n",
            "  netmask 255.255.255.0", "\\n",
            "  network 10.1.1.0", "\\n",
            "  broadcast 10.1.1.255", "\\n",
            "  post-up ip route add 10.1.1.0/24 dev eth0 src 10.1.1.10 table rt2", "\\n",
            "  post-up ip route add default via 10.1.1.1 dev eth0 table rt2", "\\n",
            "  post-up ip rule add from 10.1.1.10/32 table rt2", "\\n",
            "  post-up ip rule add to 10.1.1.10/32 table rt2", "\\n",
            "  dns-nameservers 8.8.4.4", "\\n",
            "\\n",
            "auto eth1", "\\n",
            "iface eth1 inet static", "\\n",
            "  address 10.1.5.10", "\\n",
            "  netmask 255.255.255.0", "\\n",
            "  network 10.1.5.0", "\\n",
            "  gateway 10.1.5.20", "\\n",
            "  dns-nameservers 8.8.8.8", "\\n",
            "  broadcast 10.1.5.255", "\\n",
            "\\n",
          "\" > /etc/network/interfaces", "\n",
          "ifdown -a", "\n",
          "ifup -a", "\n",
          "sudo touch ~/UserData`date +%Y%m%d%H%M%S`.End", "\n"
        ]]}}
      }
    }



  },

  "Outputs" : {
    "InternalNodePublicManagementIPAddress" : {
      "Description" : "Internal Node Public Management IP Address",
      "Value" : { "Ref" : "InternalNodePublicManagementEIP" }
    },
    "InternalNodePublicManagementSSH" : {
      "Description" : "Internal Node Public Management SSH",
      "Value" : { "Fn::Join" : [ "", [ "ssh://", { "Ref" : "InternalNodePublicManagementEIP" } ] ] }
    },

    "BigIPInternalPublicManagementIPAddress" : {
      "Description" : "Big-IP Internal Public Management IP Address",
      "Value" : { "Ref" : "BigIPInternalPublicManagementEIP" }
    },
    "BigIPInternalPublicManagementHTTPS" : {
      "Description" : "Big-IP Internal Public Management HTTPS",
      "Value" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "BigIPInternalPublicManagementEIP" } ] ] }
    },
    "BigIPInternalPublicManagementSSH" : {
      "Description" : "Big-IP Internal Public Management SSH",
      "Value" : { "Fn::Join" : [ "", [ "ssh://", { "Ref" : "BigIPInternalPublicManagementEIP" } ] ] }
    },

    "BigIPExternalPublicManagementIPAddress" : {
      "Description" : "Big-IP External Public Management IP Address",
      "Value" : { "Ref" : "BigIPExternalPublicManagementEIP" }
    },
    "BigIPExternalPublicManagementHTTPS" : {
      "Description" : "Big-IP External Public Management HTTPS",
      "Value" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "BigIPExternalPublicManagementEIP" } ] ] }
    },
    "BigIPExternalPublicManagementSSH" : {
      "Description" : "Big-IP External Public Management SSH",
      "Value" : { "Fn::Join" : [ "", [ "ssh://", { "Ref" : "BigIPExternalPublicManagementEIP" } ] ] }
    },

    "OutGoingBigIPPublicManagementIPAddress" : {
      "Description" : "OutGoing Big-IP Public Management IP Address",
      "Value" : { "Ref" : "OutGoingBigIPPublicManagementEIP" }
    },
    "OutGoingBigIPPublicManagementHTTPS" : {
      "Description" : "OutGoing Big-IP Public Management HTTPS",
      "Value" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "OutGoingBigIPPublicManagementEIP" } ] ] }
    },
    "OutGoingBigIPPublicManagementSSH" : {
      "Description" : "OutGoing Big-IP Public Management SSH",
      "Value" : { "Fn::Join" : [ "", [ "ssh://", { "Ref" : "OutGoingBigIPPublicManagementEIP" } ] ] }
    },

    "InComingBigIPPublicManagementIPAddress" : {
      "Description" : "InComing Big-IP Public Management IP Address",
      "Value" : { "Ref" : "InComingBigIPPublicManagementEIP" }
    },
    "InComingBigIPPublicManagementHTTPS" : {
      "Description" : "InComing Big-IP Public Management HTTPS",
      "Value" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "InComingBigIPPublicManagementEIP" } ] ] }
    },
    "InComingBigIPPublicManagementSSH" : {
      "Description" : "InComing Big-IP Public Management SSH",
      "Value" : { "Fn::Join" : [ "", [ "ssh://", { "Ref" : "InComingBigIPPublicManagementEIP" } ] ] }
    },

    "BigIPExternalPublicExternalBiDirectionIPAddress" : {
      "Description" : "Big-IP External Public External BiDirection IP Address",
      "Value" : { "Ref" : "BigIPExternalPublicExternalBiDirectionEIP" }
    }



  }



}
